// Generated by Phaser Editor v1.4.0 (Phaser v2.6.2)


/**
 * block.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function block(inX, inY, inType, inHp, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _blockView = this.game.add.sprite(inX, inY, 'ninja-tiles64', inType, this);
	_blockView.anchor.setTo(0.5, 0.5);
	
	// public fields
	
	this.fBlockView = _blockView;
	this.game = aGame;
	this.fBlockView.scale.set(1.2, 1.2);
	this.isMove = false;
	/* --- post-init-begin --- */

	if (this.game.physics.ninja) {
		this.game.physics.ninja.enableTile(this.fBlockView, this.fBlockView.frame);	
	}
	
	//this.hp = (inHp > 0 ? inHp : StzUtil.createRandomInteger(((this.ballCount - this.BLOCK_HP_OFFSET) <= 0 ? 1 : this.ballCount - this.BLOCK_HP_OFFSET), this.ballCount + this.BLOCK_HP_OFFSET));
	this.hp = inHp;
	
	this.fBlockHpText = this.game.add.text(0, 0, this.hp, {fontSize: '20px', fill: '#000000'});
	this.fBlockView.addChild(this.fBlockHpText);
	this.fBlockHpText.anchor.setTo(0.5, 0.5);
	
	
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var block_proto = Object.create(Phaser.Group.prototype);
block.prototype = block_proto;
block.prototype.constructor = block;

/* --- end generated code --- */
// -- user code here --

block.prototype.updateHp = function() {
	this.fBlockHpText.text = this.hp;
};

block.prototype.blockMove = function() {
	var moveY = this.fBlockView.body.y + 100;
	this.isMove = true;
	this.game.add.tween(this.fBlockView.body).to({y:moveY}, 300, Phaser.Easing.Linear.None, true)
	.onComplete.addOnce(function() {
		this.fBlockView.body.setZeroVelocity();
		this.isMove = false;
	}.bind(this));
};
