
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * TouchPangView.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function TouchPangView(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _pangViewGroup = this.game.add.group(this);
	
	var _txtTouchCount = this.game.add.text(0, 0, '3', {"font":"bold 20px Arial","stroke":"#ffffff","strokeThickness":3}, this);
	_txtTouchCount.anchor.setTo(0.5, 0.5);
	
	
	
	// public fields
	
	this.fPangViewGroup = _pangViewGroup;
	this.fTxtTouchCount = _txtTouchCount;
	/* --- post-init-begin --- */
	this.onExplode = new Phaser.Signal();
	this.onTouch = new Phaser.Signal();
	
	this.visible = false;
	
	this.getBonusTime = function() {
		return Math.floor(this.limitTime / 3);
	};
	
	this.getBonusScore = function() {
		return Math.floor(this.limitTime / 3);
	};
	
	
	this.isExplode = function() {
		if (this.pangHP <= 0) {
			return false;
		}
		
		if (this.remainTime <= 0) {
			return true;
		}
		
		return false;
	};
	
	this.isTouchClear = function() {
		if (this.pangHP <= 0) {
			return true;
		}
		
		return false;
	};
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var TouchPangView_proto = Object.create(Phaser.Group.prototype);
TouchPangView.prototype = TouchPangView_proto;
TouchPangView.prototype.constructor = TouchPangView;

/* --- end generated code --- */
// -- user code here --

TouchPangView.prototype.setPosition = function(inX, inY) {
	this.position.setTo(inX, inY);
	return this;
};

TouchPangView.prototype.setHP = function(inHP) {
	
	if (inHP <= 0) {
		this.pangHP = 3;
	} else {
		this.pangHP = inHP;
	}
	this.fTxtTouchCount.text = this.pangHP;
	return this;
};

TouchPangView.prototype.setLimitTime = function(inTime) {
	this.limitTime = inTime;
	this.remainTime = this.limitTime;
	return this;
};

TouchPangView.prototype.draw = function(inColor, inRadius) {
	
	this.radius = inRadius;

	this.baseCircleView = this.game.add.graphics(0, 0, this.fPangViewGroup);
	this.baseCircleView.beginFill(inColor, 1);
	this.baseCircleView.drawCircle(0, 0, this.radius * 2);
	this.baseCircleView.endFill();
	this.visible = true;

	this.baseCircleView.inputEnabled = true;
	this.baseCircleView.events.onInputDown.add(function() {
		this.pangHP--;
		this.onTouch.dispatch(this);
		this.fTxtTouchCount.text = this.pangHP;
		if (this.pangHP <= 0 && this.visible === true) {
			this.visible = false;
			this.onExplode.dispatch(this);
		}
	}, this);
};

TouchPangView.prototype.updateView = function() {
	
	if (this.remainTime <= 0 && this.visible === true) {
		this.visible = false;
		this.onExplode.dispatch(this);
		return;
	}
	
	this.remainTime -= this.game.time.elapsed;
	
	var targetAngle = this.game.math.mapLinear(this.remainTime, 0, this.limitTime, 1, 359);
	if (this.timeArcView) {
		this.timeArcView.clear();
	} else {
		this.timeArcView = this.game.add.graphics(0, 0, this.fPangViewGroup);
	}
	this.timeArcView.beginFill(0xffffff)
	this.timeArcView.arc(0, 0, this.radius, this.game.math.degToRad(360), this.game.math.degToRad(targetAngle), true, this.radius);	
	this.timeArcView.endFill();
};