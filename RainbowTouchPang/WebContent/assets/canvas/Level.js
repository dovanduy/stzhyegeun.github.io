
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.3 (Phaser v2.6.2)


/**
 * Level.
 */
function Level() {
	
	Phaser.State.call(this);
	
	this.MAX_POINTERS = 10;
}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function () {
	
	 
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.stage.backgroundColor = '#454645';
	
	for (var i = 0; i < this.MAX_POINTERS; i++) {
		this.game.input.addPointer();
	}
	
	// 타이머 생성
	
	this.limitTime = 10 * Phaser.Timer.SECOND;
	this.countTime = 0;
	this.score = 0;
};

Level.prototype.preload = function () {
	
};

Level.prototype.create = function () {
	this.txtTime = this.game.add.text(this.game.world.centerX, 100, "0");
	this.txtTime.anchor.set(0.5);
	this.txtTime.setStyle({fontSize: "24px", fill: "#ffffff"});
	
	this.txtGameOver = this.game.add.text(this.game.world.centerX, this.game.world.centerY, "GAME OVER\nYour Score: 0");
	this.txtGameOver.anchor.set(0.5);
	this.txtGameOver.setStyle({fontSize: "50px", fill: "#ffffff"});
	this.txtGameOver.visible = false;
	
	this.txtGameOver.inputEnabled = true;
	this.txtGameOver.events.onInputUp.add(function() {
		this.game.state.restart();
		//this.startGame();
	}, this);
	
	this.pangList = [];
	
	this.getColor = this.createColorFunc();
	
	this.startGame();
};

/* --- end generated code --- */
// -- user code here --

Level.prototype.update = function() {
	
	if (this.limitTime <= 0) {
		if (this.txtGameOver.visible === true) {
			return;
		}
		this.gameOver();
	}
	
	this.countTime += this.game.time.elapsed;
	this.limitTime -= this.game.time.elapsed;
	this.txtTime.text = "Remain Time: " + (this.limitTime <= 0 ? 0 : this.limitTime) + "\nScore: " + this.score;
	
	for (var i = 0; i < this.pangList.length; i++) {
		this.pangList[i].updateView();
	}
	
	if (this.countTime > 5 * Phaser.Timer.SECOND) {
		while(this.pangList.length <= Math.floor(this.countTime / (5 * Phaser.Timer.SECOND))) {
			this.createPang();
		}
	}
};

Level.prototype.createPang = function() {
	var tempPang = new TouchPangView(this.game);
	
	var posX = this.game.math.between(20, this.game.width - 20);
	var posY = this.game.math.between(100, this.game.height - 100);
	var radius = this.game.math.between(20, 50);
	var limitTime = this.game.math.between(5000, 10000);
	var hp = Math.floor(this.game.math.mapLinear(limitTime, 5000, 10000, 10, 30));
	
	tempPang.setPosition(posX, posY).setHP(hp).setLimitTime(limitTime).draw(this.getColor(), radius);
	tempPang.onTouch.add(function(inPang) {
		this.score += 1;
	}, this);
	tempPang.onExplode.add(function(inPang) {
		if (inPang.isExplode()) {
			this.gameOver();
			return;
		}
		
		if (inPang.isTouchClear()) {
			this.score += inPang.getBonusScore();
			this.limitTime += inPang.getBonusTime();
			this.createPang();
			this.pangList.splice(this.pangList.indexOf(inPang), 1);
			inPang.destroy();
		}
	}, this);
	
	this.pangList.push(tempPang);
};

Level.prototype.startGame = function() {
	
	//this.game.state.restart();
	this.limitTime = 10 * Phaser.Timer.SECOND;
	this.countTime = 0;
	this.score = 0;
	this.pangList = [];
	this.txtGameOver.visible = false;
	
	this.createPang();
};

Level.prototype.gameOver = function() {
	
	this.limitTime = 0;
	this.txtGameOver.text = "GAME OVER\nYour Score: " + this.score;
	this.txtGameOver.visible = true;
	
	while(this.pangList.length > 0) {
		var pang = this.pangList.shift();
		pang.visible = false;
		pang.destroy();
	}
};

Level.prototype.createColorFunc = function() {
	var index = 0;
	var rainbow = [0xff0000, 0xff7f00, 0xffff00, 0x00ff00, 0x0000ff, 0x4b0082, 0x9400d3];
	return function() {
		index = index % rainbow.length;
		return rainbow[index++];
	};
};