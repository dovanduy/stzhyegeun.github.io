
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * PopupSetting.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function PopupSetting(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _blindContainer = this.game.add.group(this);
	
	var _popupBg = new PopupBg(this.game, this);
	_popupBg.position.setTo(360, 651);
	
	var _soundContainer = this.game.add.group(this);
	
	var _btnLanguage = this.game.add.sprite(359, 799, 'mainAtlas', 'common_middle_btn.png', _soundContainer);
	_btnLanguage.anchor.setTo(0.5, 0.5);
	
	this.game.add.sprite(168, 764, 'mainAtlas', 'language_icon.png', _soundContainer);
	
	var _musicContainer = this.game.add.group(this);
	
	var _btnMusic = this.game.add.sprite(362, 624, 'mainAtlas', 'common_middle_btn.png', _musicContainer);
	_btnMusic.anchor.setTo(0.5, 0.5);
	
	var _iconMusic = this.game.add.sprite(166, 591, 'mainAtlas', 'music_on.png', _musicContainer);
	
	var _languageContainer = this.game.add.group(this);
	_languageContainer.position.setTo(597, 402);
	
	var _btnSound = this.game.add.sprite(-236, 50, 'mainAtlas', 'common_middle_btn.png', _languageContainer);
	_btnSound.anchor.setTo(0.5, 0.5);
	
	var _iconSound = this.game.add.sprite(-424, 13, 'mainAtlas', 'sound.png', _languageContainer);
	
	var _btnReset = this.game.add.sprite(596, 904, 'mainAtlas', 'share_lock.png', this);
	
	
	
	// public fields
	
	this.fBlindContainer = _blindContainer;
	this.fPopupBg = _popupBg;
	this.fBtnLanguage = _btnLanguage;
	this.fBtnMusic = _btnMusic;
	this.fIconMusic = _iconMusic;
	this.fLanguageContainer = _languageContainer;
	this.fBtnSound = _btnSound;
	this.fIconSound = _iconSound;
	this.fBtnReset = _btnReset;
	/* --- post-init-begin --- */
	_btnSound.tint = 0x4dbef0;
	_btnMusic.tint = 0x4dbef0;
	_btnLanguage.tint = 0xdbdbdb;
	//UI TEXT
	{
		var btnTextFontStyle = {fontSize : "52px", fill : '#ffffff', font : 'Lilita One', boundsAlignH: 'center', boundsAlignV: 'middle'};
		_txtSound = this.game.add.text(0, 5, StzTrans.translate(ELocale.SOUND_TEXT_B), btnTextFontStyle, this);
		_txtSound.setTextBounds(-this.fBtnSound.width/2.15, -this.fBtnSound.height/2, this.fBtnSound.width, this.fBtnSound.height);
		this.fBtnSound.addChild(_txtSound);
		
		_txtMusic = this.game.add.text(0, 5, StzTrans.translate(ELocale.MUSIC_TEXT_B), btnTextFontStyle, this);
		_txtMusic.setTextBounds(-this.fBtnMusic.width/2.15, -this.fBtnSound.height/2, this.fBtnMusic.width, this.fBtnMusic.height);
		this.fBtnMusic.addChild(_txtMusic);
		
		_txtLanguage = this.game.add.text(0, 0, StzTrans.translate(ELocale.LANGUAGE_ENGLISH), btnTextFontStyle, this);
		_txtLanguage.setTextBounds(-this.fBtnLanguage.width/2.25, -this.fBtnLanguage.height/2, this.fBtnLanguage.width, this.fBtnLanguage.height);
		this.fBtnLanguage.addChild(_txtLanguage);
		
		var updateDateFontStyle = {fontSize : "35px", fill : '#96a5aa', font : 'Lilita One', boundsAlignH: 'center', boundsAlignV: 'middle'};
		_txtUpdateDate = this.game.add.text(0, 0, StzTrans.translate(ELocale.LATEST_UPDATE_TEXT_B)+ ' ' + StzBuildConfig.LAST_UPDATE, updateDateFontStyle, this);
		_txtUpdateDate.setTextBounds(this.fPopupBg.x - this.fPopupBg.width/2, this.fPopupBg.y + this.fPopupBg.height/2.85, this.fPopupBg.width, 0);
		
		var gameVersionFontStyle = {fontSize : "31px", fill : '#b5c2c6', font : 'Lilita One', boundsAlignH: 'center', boundsAlignV: 'middle'};
		_txtVersion = this.game.add.text(0, 0, StzTrans.translate(ELocale.VERSION_TEXT_B) + " " + StzBuildConfig.VERSION, gameVersionFontStyle, this);
		_txtVersion.setTextBounds(this.fPopupBg.x - this.fPopupBg.width/2, this.fPopupBg.y + this.fPopupBg.height/2.5, this.fPopupBg.width, 0);
		
		_txtPID = this.game.add.text(0, 0, StzTrans.translate(ELocale.PID_TEXT_B) + " " + PlayerDataManager.getPlatformId()
				+ '(' + Server.serverId + ')', gameVersionFontStyle, this);
		_txtPID.setTextBounds(this.fPopupBg.x - this.fPopupBg.width/2, this.fPopupBg.y + this.fPopupBg.height/2.3, this.fPopupBg.width, 0);
	}

	this.fPopupBg.setData(StzTrans.translate(ELocale.OPTION_TEXT_B), function(){
		this.game.state.getCurrentState().offBlindFunc();
		PopupBg.destroyAlphaTween(this.game, this);
	}.bind(this));
	
	this.fBtnSound.inputEnabled = true;
	this.fBtnSound.events.onInputUp.add(function(){
		window.sounds.sound('sfx_button').play();
		var isSound = (PlayerDataManager.saveData.getSound() === 1)? 0 : 1;
		PlayerDataManager.saveData.setSound(isSound);
		this.fIconSound.frameName = (PlayerDataManager.saveData.getSound() == 1)? 'sound.png':'mute_sound.png';
		window.sounds.toggleSound(PlayerDataManager.saveData.getSound());
	}.bind(this));
	
	this.fBtnMusic.inputEnabled = true;
	this.fBtnMusic.events.onInputUp.add(function(){
		window.sounds.sound('sfx_button').play();
		var isMusic = (PlayerDataManager.saveData.getMusic() === 1)? 0 : 1;
		PlayerDataManager.saveData.setMusic(isMusic);
		this.fIconMusic.frameName = (PlayerDataManager.saveData.getMusic() == 1)? 'music_on.png':'music_mute.png';
		window.sounds.toggleMusic(PlayerDataManager.saveData.getMusic());
	}.bind(this));
	
	this.fBtnReset.visible = StzGameConfig.QA_MODE;
	this.fBtnReset.inputEnabled = true;
	this.fBtnReset.events.onInputUp.add(function(){
		window.sounds.sound('sfx_button').play();
		PlayerDataManager.saveData = new SaveDataModel();
		CharacterManager.init();
		CharacterManager.setIsOwenCharacters('1');
		CharacterManager.setUnlockValue(null);
		this.game.state.restart();
	}.bind(this));
//	this.fBtnLanguage.inputEnabled = true;
//	this.fBtnLanguage.events.onInputUp.add(function(){
//		window.sounds.sound('sfx_button').play();
//		StzGameConfig.COLLIDER_MODE = (StzGameConfig.COLLIDER_MODE === true)? false : true;
//		_txtLanguage.text = (StzGameConfig.COLLIDER_MODE === true)? 'ON' : 'OFF';
//	}.bind(this, _txtLanguage));
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var PopupSetting_proto = Object.create(Phaser.Group.prototype);
PopupSetting.prototype = PopupSetting_proto;
PopupSetting.prototype.constructor = PopupSetting;

/* --- end generated code --- */
// -- user code here --
PopupSetting.prototype.setData = function() {
	this.fIconSound.frameName = (PlayerDataManager.saveData.getSound() == 1)? 'sound.png':'mute_sound.png';
	this.fIconMusic.frameName = (PlayerDataManager.saveData.getMusic() == 1)? 'music_on.png':'music_mute.png';
};

PopupSetting.prototype.superDestroy = PopupSetting.prototype.destroy;
PopupSetting.prototype.destroy = function(destroyChildren, soft) {
	this.superDestroy(destroyChildren, soft);
};