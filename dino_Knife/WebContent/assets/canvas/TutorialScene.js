
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * TutorialScene.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function TutorialScene(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _blindContainer = this.game.add.group(this);
	
	var _txtTitle = this.game.add.text(363, 119, 'HOW TO PLAY', {"font":"bold 68px Lilita One","fill":"#ffffff"}, this);
	_txtTitle.anchor.setTo(0.5, 0.5);
	
	var _txtTouch = this.game.add.text(512, 815, 'TAP', {"font":"bold 26px Lilita One","align":"center"}, this);
	_txtTouch.anchor.setTo(0.5, 0.5);
	
	var _txtDecTitle = this.game.add.text(360, 915, 'TAP TO THROW STINGER!', {"font":"bold 42px Lilita One","align":"center"}, this);
	_txtDecTitle.anchor.setTo(0.5, 0.5);
	
	var _txtDec = this.game.add.text(360, 987, 'AVOID OBSTRUCTIONS\n& OTHER STINGERS', {"font":"bold 34px Lilita One","align":"center"}, this);
	_txtDec.anchor.setTo(0.5, 0.5);
	
	var _imageFinger = this.game.add.sprite(509, 747, 'mainAtlas', 'finger.png', this);
	_imageFinger.anchor.setTo(0.5, 0.5);
	
	var _fingerClick = this.game.add.sprite(444, 662, 'mainAtlas', 'finger_cilick_fx.png', this);
	
	var _imagePin3 = this.game.add.sprite(359, 779, 'mainAtlas', 'tutorial_pin.png', this);
	_imagePin3.anchor.setTo(0.5, 0.3);
	
	var _imagePin2 = this.game.add.sprite(359, 779, 'mainAtlas', 'tutorial_pin.png', this);
	_imagePin2.anchor.setTo(0.5, 0.3);
	
	var _imagePin1 = this.game.add.sprite(359, 779, 'mainAtlas', 'tutorial_pin.png', this);
	_imagePin1.anchor.setTo(0.5, 0.3);
	
	var _bossBodyContainer = this.game.add.group(this);
	
	var _obstacle = this.game.add.sprite(360, 577, 'mainAtlas', 'common_small_circle.png', _bossBodyContainer);
	_obstacle.scale.setTo(0.7, 0.7);
	_obstacle.anchor.setTo(0.5, 0.5);
	
	var _body = this.game.add.sprite(361, 435, 'mainAtlas', 'circle.png', _bossBodyContainer);
	_body.scale.setTo(0.41, 0.41);
	_body.anchor.setTo(0.5, 0.5);
	
	var _bossFaceContainer = this.game.add.group(this);
	_bossFaceContainer.position.setTo(357, 436);
	_bossFaceContainer.scale.setTo(0.8, 0.8);
	
	var _bossMouth = this.game.add.sprite(-25, 137, 'mainAtlas', 'boss_mouth.png', _bossFaceContainer);
	_bossMouth.scale.setTo(1.2, 1.2);
	
	var _bossLeftEyeOut = this.game.add.sprite(-57, 77, 'mainAtlas', 'particle_star.png', _bossFaceContainer);
	_bossLeftEyeOut.scale.setTo(0.65, 0.65);
	
	var _bossRightEyeOut = this.game.add.sprite(3, 77, 'mainAtlas', 'particle_star.png', _bossFaceContainer);
	_bossRightEyeOut.scale.setTo(0.65, 0.65);
	
	var _bossRightEyeIn = this.game.add.sprite(19, 104, 'mainAtlas', 'eye.png', _bossFaceContainer);
	_bossRightEyeIn.scale.setTo(0.51, 0.51);
	_bossRightEyeIn.anchor.setTo(0.5, 0.5);
	_bossRightEyeIn.tint = 0x1e9fbc;
	
	var _bossLeftEyeIn = this.game.add.sprite(-20, 104, 'mainAtlas', 'eye.png', _bossFaceContainer);
	_bossLeftEyeIn.scale.setTo(0.51, 0.51);
	_bossLeftEyeIn.anchor.setTo(0.5, 0.5);
	_bossLeftEyeIn.tint = 0x1e9fbc;
	
	var _bossEyeCoverShadow = this.game.add.sprite(-82, 57, 'mainAtlas', 'boss_eye_cover.png', _bossFaceContainer);
	_bossEyeCoverShadow.alpha = 0.5;
	
	var _bossEyeCover = this.game.add.sprite(-83, 52, 'mainAtlas', 'boss_eye_cover.png', _bossFaceContainer);
	
	var _btnOkContainer = this.game.add.group(this);
	
	var _btnOK = this.game.add.sprite(123, 1072, 'mainAtlas', 'common_middle_btn.png', _btnOkContainer);
	
	var _txtOK = this.game.add.text(323, 1096, 'OK', {"font":"bold 58px Lilita One","fill":"#ffffff"}, _btnOkContainer);
	
	
	
	// public fields
	
	this.fBlindContainer = _blindContainer;
	this.fTxtTitle = _txtTitle;
	this.fTxtTouch = _txtTouch;
	this.fTxtDecTitle = _txtDecTitle;
	this.fTxtDec = _txtDec;
	this.fImageFinger = _imageFinger;
	this.fFingerClick = _fingerClick;
	this.fImagePin3 = _imagePin3;
	this.fImagePin2 = _imagePin2;
	this.fImagePin1 = _imagePin1;
	this.fBossBodyContainer = _bossBodyContainer;
	this.fObstacle = _obstacle;
	this.fBody = _body;
	this.fBossFaceContainer = _bossFaceContainer;
	this.fBossMouth = _bossMouth;
	this.fBossLeftEyeOut = _bossLeftEyeOut;
	this.fBossRightEyeOut = _bossRightEyeOut;
	this.fBossRightEyeIn = _bossRightEyeIn;
	this.fBossLeftEyeIn = _bossLeftEyeIn;
	this.fBossEyeCoverShadow = _bossEyeCoverShadow;
	this.fBossEyeCover = _bossEyeCover;
	this.fBtnOkContainer = _btnOkContainer;
	this.fBtnOK = _btnOK;
	this.fTxtOK = _txtOK;
	/* --- post-init-begin --- */
	_body.tint = 0x365070;
	_obstacle.tint = 0xc5dfff;
	_bossEyeCover.tint = 0x365070;
	_btnOK.tint = 0x2a549e;
	
	//text init
	{
		_txtTitle.text = StzTrans.translate(ELocale.TUTORIAL_TITLE);
		_txtTouch.fill = '#386a9b';
		_txtTouch.text = StzTrans.translate(ELocale.TAP_TEXT_B);
		_txtDecTitle.fill = '#386a9b';
		_txtDecTitle.text = StzTrans.translate(ELocale.TUTORIAL_TEXT1);
		_txtDec.fill = '#365070';
		_txtDec.text = StzTrans.translate(ELocale.TUTORIAL_TEXT2);
		_txtOK.text = StzTrans.translate(ELocale.OK_TEXT_b);
	}
	
	this.fBossBodyContainer.x = 361;
	this.fBossBodyContainer.y = 435;
	this.fBossBodyContainer.pivot.x = this.fBossBodyContainer.x;
	this.fBossBodyContainer.pivot.y = this.fBossBodyContainer.y;
	
	_imagePin2.visible = false;
	_imagePin3.visible = false;
	
	this.fImagePinArray = [_imagePin1, _imagePin2, _imagePin3];
	this.fFingerClick.visible = false;
	
	this.fBtnOK.inputEnabled = true;
	this.fBtnOK.events.onInputUp.add(function(){
		window.sounds.sound('sfx_button').play();
		this.game.state.getCurrentState().toggleTutorialScene();
	}.bind(this));
	
	this.fBtnOkContainer.visible = false;
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var TutorialScene_proto = Object.create(Phaser.Group.prototype);
TutorialScene.prototype = TutorialScene_proto;
TutorialScene.prototype.constructor = TutorialScene;

/* --- end generated code --- */
// -- user code here --
TutorialScene.prototype.playTutorial = function(){
	for(var i = 0; i < this.fImagePinArray.length; i++){
		this.fImagePinArray[i].x = 359;
		this.fImagePinArray[i].y = 779 - this.fBody.height/2;
		this.fImagePinArray[i].pivot.y = -this.fBody.height/2;
		this.fImagePinArray[i].rotation = 0;
		this.fImagePinArray[i].visible = false;
		this.fImagePinArray[i].anchor.y = 0.3;
	}
	this.fImagePin1.visible = true;
	this.fBossBodyContainer.rotation = 0;
	var dest = this.fBossBodyContainer.y;
	var preRotation = this.fBossBodyContainer.rotation;
	var tweenTutorial = this.game.add.tween(this.fBossBodyContainer).to({rotation : Math.PI*3}, 4500, Phaser.Easing.Linear.None, true);
	tweenTutorial.onUpdateCallback(function(inParam){
		var gap = this.fBossBodyContainer.rotation - preRotation;
		if(inParam.target){
			if(Math.PI*0.5 <= inParam.target.rotation && this.fImagePin1.y === 779 - this.fBody.height/2){
				this.touchAnim();
				this.fImagePin1.y++;
				this.game.add.tween(this.fImagePin1).to({y : dest}, 500, Phaser.Easing.Linear.None, true)
				.onComplete.addOnce(function(){
					this.fImagePin1.y = dest;
					this.fImagePin2.visible = true;
				}.bind(this));
			}
			else if(Math.PI*1 <= inParam.target.rotation && this.fImagePin2.y === 779 - this.fBody.height/2){
				this.touchAnim();
				this.fImagePin2.y++;
				this.game.add.tween(this.fImagePin2).to({y : dest}, 500, Phaser.Easing.Linear.None, true)
				.onComplete.addOnce(function(){
					this.fImagePin2.y =  dest;
					this.fImagePin3.visible = true;
				}.bind(this));
			}
			else if(Math.PI*1.7 <= inParam.target.rotation && this.fImagePin3.y === 779 - this.fBody.height/2){
				this.touchAnim();
				this.fImagePin3.y++;
				this.game.add.tween(this.fImagePin3).to({y : dest}, 500, Phaser.Easing.Linear.None, true)
				.onComplete.addOnce(function(){
					this.fImagePin3.y -= this.fImagePin3.pivot.y;
					this.fImagePin3.pivot.y = 0;
					this.fImagePin3.anchor.set(0.5);
					
					var moveX = this.fImagePin3.world.x - 250;
					var moveY = this.fImagePin3.world.y + 250;
					window.sounds.sound('sfx_crash').play();
					this.game.add.tween(this.fImagePin3).to({x:moveX, y:moveY}, 1000, Phaser.Easing.Linear.None, true)
					.onUpdateCallback(function(inParam){
						inParam.target.rotation += 0.25;
					}.bind(this))
					.onComplete.addOnce(function(){
						this.fImagePin3.visible = false;
						if(this.fBtnOkContainer.visible === false){
							this.fBtnOkContainer.visible = true;
						}
					}.bind(this));
				}.bind(this));
			}
			
			if(this.fImagePin1.y ===  dest){
				this.fImagePin1.rotation += gap;
			}
			
			if(this.fImagePin2.y === dest){
				this.fImagePin2.rotation += gap;
			}
			
			preRotation = this.fBossBodyContainer.rotation;	
		}
	}.bind(this), preRotation);
	tweenTutorial.onComplete.addOnce(function(inParam){
		if(inParam){
			this.game.tweens.remove(inParam);
			inParam = null;
		}
		this.game.time.events.add(1000, function(){
			this.playTutorial();
		}.bind(this));
	}.bind(this, tweenTutorial));
};

TutorialScene.prototype.touchAnim = function(){
	window.sounds.sound('sfx_throw').play();
	this.fFingerClick.visible = false;
	this.fImageFinger.scale.set(1);
	
	this.game.add.tween(this.fImageFinger.scale).to({x : 1.2, y : 1.2}, 150, Phaser.Easing.Linear.None, true)
	.onComplete.addOnce(function(){
		this.fFingerClick.visible = true;
		this.game.add.tween(this.fImageFinger.scale).to({x : 1, y : 1}, 150, Phaser.Easing.Linear.None, true)
		.onComplete.addOnce(function(){
			this.fFingerClick.visible = false;
		}.bind(this));
	}.bind(this));
};

TutorialScene.prototype.superDestroy = TutorialScene.prototype.destroy;
TutorialScene.prototype.destroy = function(destroyChildren, soft) {
	this.game.tweens.removeAll();
	this.game.time.events.removeAll();
	this.superDestroy(destroyChildren, soft);
};