
// -- user code here --
/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * CharacterScene.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function CharacterScene(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _btnClose = this.game.add.sprite(624, 78, 'mainAtlas', 'x_btn.png', this);
	
	var _btnPlayGroup = this.game.add.group(this);
	_btnPlayGroup.position.setTo(360, 1180);
	
	var _btnPlayStage = this.game.add.sprite(0, 0, 'mainAtlas', 'common_middle_btn.png', _btnPlayGroup);
	_btnPlayStage.anchor.setTo(0.5, 0.5);
	_btnPlayStage.tint = 0xf4ba00;
	
	var _txtPlay = this.game.add.text(0, 20, 'PLAY', {"font":"bold 50px Lilita One","fill":"#ffffff"}, _btnPlayGroup);
	_txtPlay.anchor.setTo(0.5, 0.5);
	
	var _txtStage = this.game.add.text(0, -22, 'STAGE 100', {"font":"bold 26px Lilita One","fill":"#ffffff"}, _btnPlayGroup);
	_txtStage.anchor.setTo(0.5, 0.5);
	
	var _txtShadow = this.game.add.text(360, 111, 'CHARACTER', {"font":"bold 72px Lilita One"}, this);
	_txtShadow.alpha = 0.2;
	_txtShadow.anchor.setTo(0.5, 0.5);
	
	var _txtTitle = this.game.add.text(360, 100, 'CHARACTER', {"font":"bold 72px Lilita One","fill":"#ffffff"}, this);
	_txtTitle.anchor.setTo(0.5, 0.5);
	
	
	
	// public fields
	
	this.fBtnClose = _btnClose;
	this.fBtnPlayStage = _btnPlayStage;
	this.fTxtStage = _txtStage;
	this.fTxtShadow = _txtShadow;
	this.fTxtTitle = _txtTitle;
	/* --- post-init-begin --- */
	
	//text init
	{
		_txtPlay.text = StzTrans.translate(ELocale.PLAY_TEXT_B);
		_txtStage.text = StzUtil.strFormatObj(StzTrans.translate(ELocale.STAGE_TEXT_B), {N : PlayerDataManager.saveData.getBestStage()});
		_txtShadow.text = StzTrans.translate(ELocale.CHARACTER_TEXT_B);
		_txtTitle.text = StzTrans.translate(ELocale.CHARACTER_TEXT_B);
		
	}
	this.slots = [];
	this.selectedSlot = null;
	
	var posX = 120, posY = 300, offsetX = 0, offsetY = 0, flagRow = 4, flagCol = 4, i = 0;

	for(i=0;i<10;++i){
		var row = Math.floor(i / flagCol);
		var col = i % flagCol;
		var temp = new CharacterSlot(this.game, this);
		var tempWidth = temp.width;
		var tempHeight = temp.height;

		offsetX = 20;
		offsetY = 20;

		temp.position.setTo(posX + (tempWidth + offsetX) * col, posY + (tempHeight + offsetY) * row);
		this.slots.push(temp);
	}
	var btnSizeOffset = 35;
	this.fBtnClose.hitArea = new Phaser.Rectangle(-1 * btnSizeOffset, -1 * btnSizeOffset, this.fBtnClose.width + btnSizeOffset * 2, this.fBtnClose.height + btnSizeOffset * 2);
	
	this.fBtnClose.inputEnabled = true;
	this.fBtnClose.events.onInputUp.add(function() {
		window.sounds.sound('sfx_button').play();
		var inGameState = this.game.state.getCurrentState();
		inGameState.toggleCharacterScene();
		CharacterManager.saveCharacterData();
	}, this);

	this.fBtnPlayStage.inputEnabled = true;
	this.fBtnPlayStage.events.onInputUp.add(function() {
		StzLog.print("characterScene/playstage");
		window.sounds.sound('sfx_button').play();
		this.game.state.getCurrentState().createInGameScene(PlayerDataManager.saveData.getBestStage());
		CharacterManager.saveCharacterData();
	}, this);
	
//	_txtTitle.inputEnabled = true;
//	_txtTitle.events.onInputUp.add(function(){
//		window.sounds.sound('sfx_button').play();
//		CharacterManager.allOpenCharacter();
//		this.game.state.getCurrentState().toggleCharacterScene();
//	}.bind(this));
	
	this.fPopupShop = new PopupShop(this.game, this);
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var CharacterScene_proto = Object.create(Phaser.Group.prototype);
CharacterScene.prototype = CharacterScene_proto;
CharacterScene.prototype.constructor = CharacterScene;

/* --- end generated code --- */
// -- user code here --
CharacterScene.prototype.setData = function() {
	for(var i=0;i<10;++i){
		this.slots[i].setSlot(i);
	}
	this.fTxtTitle.visible = true;
	this.fTxtShadow.visible = true;
};

CharacterScene.prototype.setScene = function(selectedIndex) {
	this.slots[selectedIndex - 1].selectSlot();
	
	this.fTxtStage.text = 'STAGE ' + PlayerDataManager.saveData.getBestStage();
};

CharacterScene.prototype.showPopupShop = function(inCharacterData){
	var type = "";
	this.fTxtTitle.visible = false;
	this.fTxtShadow.visible = false;
	
	if(inCharacterData.unlockCondition === ECharacter.UnlockCondition.BUY){
		type = EPopupShopType.BUY;
	}
	else if(inCharacterData.unlockCondition === ECharacter.UnlockCondition.VIDEO){
		type = EPopupShopType.VIDEO;
	}
	else if(inCharacterData.unlockCondition === ECharacter.UnlockCondition.SHARE){
		if(inCharacterData.unlockValue - PlayerDataManager.saveData.getShareCount() <= 0){
			type = EPopupShopType.CLAIM;
		}
		else{
			type = EPopupShopType.SHARE;
		}
	}
	else{
		if(inCharacterData.unlockValue <= inCharacterData.curValue){
			type = EPopupShopType.CLAIM;
		}
		else{
			type = EPopupShopType.BUY;
		}
	}
	this.fPopupShop.setData(type, inCharacterData);
};