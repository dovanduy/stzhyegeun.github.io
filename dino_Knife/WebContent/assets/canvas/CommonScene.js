
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * CommonScene.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function CommonScene(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _backGroundContainer = this.game.add.group(this);
	
	var _alphaBg = this.game.add.sprite(0, 0, 'alphaBg', null, this);
	
	var _motionBgContainer = this.game.add.group(this);
	_motionBgContainer.position.setTo(432, 604);
	
	var _motionBg6 = this.game.add.sprite(-206, -225, 'mainAtlas', 'motion_bg_large.png', _motionBgContainer);
	
	var _motionBg5 = this.game.add.sprite(86, -182, 'mainAtlas', 'motion_bg_small02.png', _motionBgContainer);
	
	var _motionBg4 = this.game.add.sprite(-226, 138, 'mainAtlas', 'motion_bg_small01.png', _motionBgContainer);
	
	var _motionBg3 = this.game.add.sprite(21, -137, 'mainAtlas', 'motion_bg_medium.png', _motionBgContainer);
	
	var _motionBg2 = this.game.add.sprite(5, 335, 'mainAtlas', 'motion_bg_small.png', _motionBgContainer);
	
	var _motionBg1 = this.game.add.sprite(-339, -63, 'mainAtlas', 'motion_bg_medium.png', _motionBgContainer);
	
	var _outObjectContainer = this.game.add.group(this);
	
	var _cloudContainer = this.game.add.group(_outObjectContainer);
	_cloudContainer.position.setTo(660, 0);
	
	this.game.add.sprite(58, 42, 'mainAtlas', 'cloud01.png', _cloudContainer);
	
	var _cloud01_png1 = this.game.add.sprite(47, 472, 'mainAtlas', 'cloud01.png', _cloudContainer);
	_cloud01_png1.scale.setTo(1.22, 1.22);
	
	this.game.add.sprite(442, 331, 'mainAtlas', 'cloud02.png', _cloudContainer);
	
	var _lobbyScene = this.game.add.group(this);
	
	var _gameScene = this.game.add.group(this);
	
	var _titleScene = this.game.add.group(this);
	
	var _resultScene = this.game.add.group(this);
	
	var _pauseScene = this.game.add.group(this);
	
	var _rankScene = this.game.add.group(this);
	
	var _characterScene = this.game.add.group(this);
	
	var _tutorialScene = this.game.add.group(this);
	
	var _loadingContainer = this.game.add.group(this);
	
	var _topContainer = this.game.add.group(this);
	
	
	
	// public fields
	
	this.fBackGroundContainer = _backGroundContainer;
	this.fAlphaBg = _alphaBg;
	this.fMotionBgContainer = _motionBgContainer;
	this.fMotionBg6 = _motionBg6;
	this.fMotionBg5 = _motionBg5;
	this.fMotionBg4 = _motionBg4;
	this.fMotionBg3 = _motionBg3;
	this.fMotionBg2 = _motionBg2;
	this.fMotionBg1 = _motionBg1;
	this.fOutObjectContainer = _outObjectContainer;
	this.fCloudContainer = _cloudContainer;
	this.fLobbyScene = _lobbyScene;
	this.fGameScene = _gameScene;
	this.fTitleScene = _titleScene;
	this.fResultScene = _resultScene;
	this.fPauseScene = _pauseScene;
	this.fRankScene = _rankScene;
	this.fCharacterScene = _characterScene;
	this.fTutorialScene = _tutorialScene;
	this.fLoadingContainer = _loadingContainer;
	this.fTopContainer = _topContainer;
	/* --- post-init-begin --- */
	
	// BLIND 
	{
		this.fBlind = this.game.add.graphics(0, 0);
		this.fBlind.beginFill(0x000000);
		this.fBlind.drawRect(0, 0, this.game.world.width, this.game.world.height);
		this.fBlind.alpha = 0.7;
		this.fBlind.inputEnabled = true;
		this.fBlind.visible = false;
	}
	
	//fade InOut BLIND
	{
		this.fFadeBlind = this.game.add.graphics(0, 0);
		this.fFadeBlind.beginFill(0x000000);
		this.fFadeBlind.drawRect(0, 0, this.game.world.width, this.game.world.height);
		this.fFadeBlind.inputEnabled = true;
		this.fFadeBlind.visible = false;
	}
	
	//BackGound
	{
		this.fBackGround = this.game.add.graphics(0, 0);
		this.fBackGround.beginFill(0xffffff);
		this.fBackGround.drawRect(0, 0, this.game.world.width, this.game.world.height);
		this.fBackGroundContainer.add(this.fBackGround);
		this.fBackGroundContainer.visible = true;
	}
	
	this.fMotionBgArray = [this.fMotionBg1, this.fMotionBg2, this.fMotionBg3, this.fMotionBg4, this.fMotionBg5, this.fMotionBg6];
	for(var i = 0; i < this.fMotionBgArray.length; i++){
		this.fMotionBgArray[i].tint = 0x4069ff;
		this.tweenMotionBg(this.fMotionBgArray[i]);
	}
	this.isTweenBg = true;
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var CommonScene_proto = Object.create(Phaser.Group.prototype);
CommonScene.prototype = CommonScene_proto;
CommonScene.prototype.constructor = CommonScene;

/* --- end generated code --- */
// -- user code here --
CommonScene.prototype.init = function(inGame){
	this.game = inGame;
};

CommonScene.prototype.updateUIByRank = function(){
	this.fBackGround.clear();
	this.fBackGround.beginFill(0x282139);
	this.fBackGround.drawRect(0, 0, this.game.world.width, this.game.world.height);
	this.fAlphaBg.tint = 0x252d53;
	this.fMotionBgContainer.visible = false;
	this.fCloudContainer.visible = false;
};

CommonScene.prototype.updateUIByTilte = function(){
	this.fBackGround.clear();
	this.fBackGround.beginFill(0x00d7ff);
	this.fBackGround.drawRect(0, 0, this.game.world.width, this.game.world.height);
	this.fAlphaBg.tint = 0x0061aa;
	
	this.fMotionBgContainer.visible = true;
	this.fCloudContainer.visible = true;
	if(!this.cloudTween){
		this.cloudTween = this.game.add.tween(this.fCloudContainer).to({x: -690}, 15000, Phaser.Easing.Linear.None, true, 0, -1);
	}
};

CommonScene.prototype.updateUIByWinResult = function(){
	this.fBackGround.clear();
	this.fBackGround.beginFill(0x00ffe1);
	this.fBackGround.drawRect(0, 0, this.game.world.width, this.game.world.height);
	this.fAlphaBg.tint = 0x0542b9;
	
	this.fMotionBgContainer.visible = false;
	this.fCloudContainer.visible = false;
};

CommonScene.prototype.tweenMotionBg = function(motionBg){
	if(this.isTweenBg === false){
		return;
	}

	var time = StzUtil.createRandomInteger(1500, 2500);
	var randomY = motionBg.y + ((StzUtil.createRandomInteger(0, 1) === 0)? -1: 1)*100;
	
	if(randomY <= -this.fMotionBgContainer.y/2 - 100){
		randomY = -this.fMotionBgContainer.y/2;
	} 
	else if(this.fMotionBgContainer.y - 150 <= randomY){
		randomY = this.fMotionBgContainer.y - 300;
	}
	
	 this.game.add.tween(motionBg).to({y : randomY}, time, Phaser.Easing.Linear.None, true)
	.onComplete.addOnce(function(inParam){
		this.tweenMotionBg(inParam);
	}.bind(this));
};

CommonScene.prototype.motionBgInGame = function(inMode){
	this.fMotionBgContainer.scale.set(1);
	this.fMotionBgContainer.y = 250;	
	
	this.fMotionBgContainer.visible = true;
	this.isTweenBg = true;
	
	for(var i = 0; i < this.fMotionBgArray.length; i++){
		if(inMode === 'N'){
			this.fMotionBgArray[i].tint = 0x7ad6e5;
		}
		else if(inMode === 'H'){
			this.fMotionBgArray[i].tint = 0xff0031;
		}
		
		this.tweenMotionBg(this.fMotionBgArray[i]);
	}
};

CommonScene.prototype.motionBgDownAnimation = function(isNotTween){
	if(isNotTween === true){
		this.fMotionBgContainer.y = 1450;
		this.fMotionBgContainer.scale.set(2);
		return;
	}
	var moveY = 1150;
	
	this.game.add.tween(this.fMotionBgContainer).to({y:moveY}, 600, Phaser.Easing.Linear.None, true)
	.onUpdateCallback(function(inParam){
		if(inParam.target.y){
			var scale = Phaser.Math.mapLinear(inParam.target.y, 695, moveY, 1, 2);
			this.fMotionBgContainer.scale.set(scale);
		}
	}.bind(this))
	.onComplete.addOnce(function(){
		var moveY = this.fMotionBgContainer.y + 300;
		this.game.add.tween(this.fMotionBgContainer).to({y:moveY}, 1000, Phaser.Easing.Linear.None, true)
	}.bind(this));
};

CommonScene.prototype.showBlind = function(inContainer){
	if(this.fBlind.parent){
		this.fBlind.parent.remove(this.fBlind);
	}
	
	this.fBlind.alpha = 0.7;
	inContainer.add(this.fBlind);
	this.fBlind.visible = true;
};

CommonScene.prototype.offBlind = function(){
	this.fBlind.parent.remove(this.fBlind);
	this.fBlind.visible = false;
};

CommonScene.prototype.fadeInBlind = function(inTime, inContainer, inCompleteCallback){
	inContainer.add(this.fFadeBlind);
	this.fFadeBlind.visible = true;
	
	this.fFadeBlind.alpha = 0;
	this.game.add.tween(this.fFadeBlind).to({alpha : 1}, inTime, Phaser.Easing.Linear.None, true)
	.onComplete.addOnce(function(){
		inContainer.remove(this.fFadeBlind);
		if(inCompleteCallback){
			inCompleteCallback();
		}
	}.bind(this));
};

CommonScene.prototype.fadeOutBlind = function(inTime, inContainer, inCompleteCallback){
	inContainer.add(this.fFadeBlind);
	this.fFadeBlind.visible = true;
	
	this.fFadeBlind.alpha = 1;
	this.game.add.tween(this.fFadeBlind).to({alpha : 0}, inTime, Phaser.Easing.Linear.None, true)
	.onComplete.addOnce(function(){
		inContainer.remove(this.fFadeBlind);
		if(inCompleteCallback){
			inCompleteCallback();
		}
	}.bind(this));
};

CommonScene.prototype.superDestroy = CommonScene.prototype.destroy;
CommonScene.prototype.destroy = function(destroyChildren, soft) {
	if(this.cloudTween){
		this.game.tweens.remove(this.cloudTween);
		this.cloudTween = null;
	}
	this.isTweenBg = false;
	this.superDestroy(destroyChildren, soft);
};