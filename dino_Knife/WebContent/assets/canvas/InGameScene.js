
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * InGameScene.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function InGameScene(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _snowEmitterContainer = this.game.add.group(this);
	
	var _characterContainer = this.game.add.group(this);
	
	var _targetContainer = this.game.add.group(this);
	
	var _gameBoard = this.game.add.group(this);
	_gameBoard.position.setTo(0, 150);
	
	var _remainCountContainer = this.game.add.group(this);
	
	var _oopsContainer = this.game.add.group(this);
	_oopsContainer.position.setTo(0, 400);
	
	var _bgOops = this.game.add.sprite(360, 0, 'mainAtlas', 'btn_large_common.png', _oopsContainer);
	_bgOops.alpha = 0.8;
	_bgOops.anchor.setTo(0.5, 0.5);
	
	var _txtOops = this.game.add.text(360, -34, 'OOPS!!!', {"font":"bold 96px Lilita One","fill":"#ffffff"}, _oopsContainer);
	_txtOops.anchor.setTo(0.5, 0.5);
	
	var _txtDec = this.game.add.text(360, 54, 'LET\'S DO IT AGAIN!', {"font":"bold 42px Lilita One","fill":"#ffffff"}, _oopsContainer);
	_txtDec.anchor.setTo(0.5, 0.5);
	
	var _iconCount = this.game.add.sprite(532, 1196, 'mainAtlas', 'left_shot_icon.png', this);
	_iconCount.alpha = 0.0;
	
	var _btnPaused = this.game.add.sprite(641, 44, 'mainAtlas', 'paused_btn.png', this);
	
	var _characterMarker = this.game.add.sprite(360, 1124, 'characterAtlas', '1.png', this);
	_characterMarker.anchor.setTo(0.5, 0.5);
	
	
	
	// public fields
	
	this.fSnowEmitterContainer = _snowEmitterContainer;
	this.fCharacterContainer = _characterContainer;
	this.fTargetContainer = _targetContainer;
	this.fGameBoard = _gameBoard;
	this.fRemainCountContainer = _remainCountContainer;
	this.fOopsContainer = _oopsContainer;
	this.fBgOops = _bgOops;
	this.fTxtOops = _txtOops;
	this.fTxtDec = _txtDec;
	this.fIconCount = _iconCount;
	this.fBtnPaused = _btnPaused;
	this.fCharacterMarker = _characterMarker;
	/* --- post-init-begin --- */
	var curID = PlayerDataManager.saveData.getCharacterID();
	var characterData = CharacterManager.getCharacterData(curID);
	this.fCharacterMarker.loadTexture("characterAtlas", characterData.id + ".png");

	//add dinoCharacter
	this.dinoCharacter = new OpeningDino(this.game, this);

	this.fTargetModel = null;
	this.fCharaterModel = null;

	this.fGameBoardHitArea = this.game.add.graphics(0, 0);
	this.fGameBoardHitArea.beginFill(0x000000);
	this.fGameBoardHitArea.alpha = 0;
	this.fGameBoardHitArea.drawRect(0, 0, this.game.world.width, this.game.world.height);
	this.fGameBoardHitArea.inputEnabled = true;
	this.fGameBoardHitArea.events.onInputDown.add(InGameController.onClickedMouse, InGameController)
	this.fGameBoard.add(this.fGameBoardHitArea);
	
	//debugger;
	this.fBtnPaused.hitArea = new Phaser.Rectangle(-this.fBtnPaused.width, -this.fBtnPaused.height, this.fBtnPaused.width*3, this.fBtnPaused.height*3);
	this.fBtnPaused.inputEnabled = true;
	this.fBtnPaused.events.onInputUp.add(function(){
		if(InGameController.getIsPlay() === false){
			return;
		}
		window.sounds.sound('sfx_button').play();
		this.game.state.getCurrentState().togglePauseScene();
	}.bind(this));
	
	var snowEmitter = this.game.add.emitter(this.game.world.centerX, 0, 30);
	snowEmitter.width = this.game.world.width;
	snowEmitter.makeParticles('mainAtlas', 'particle_star.png');
	
	snowEmitter.minParticleScale = 0.05;
	snowEmitter.maxParticleScale = 0.15;
	snowEmitter.minParticleAlpha = 0.3;
	snowEmitter.maxParticleAlpha = 1;
	
	snowEmitter.setYSpeed(10, 50);
	snowEmitter.setXSpeed(-50, 50);

	snowEmitter.minRotation = 0;
	snowEmitter.maxRotation = 0;

	snowEmitter.start(false, 5000, 250, 0);
	
	this.fSnowEmitterContainer.add(snowEmitter);
	
	//oops 관련
	{
		_bgOops.tint = 0x000000;
		this.fOopsContainer.visible = false;
		
		_txtOops.text = StzTrans.translate(ELocale.FIRST_FAIL_OOPS);
	}
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var InGameScene_proto = Object.create(Phaser.Group.prototype);
InGameScene.prototype = InGameScene_proto;
InGameScene.prototype.constructor = InGameScene;

/* --- end generated code --- */
// -- user code here --
InGameScene.prototype.setData = function(inGameData, inTagretModel, inIsTutorial, inColorData){
	this.visible = true;
	
	this.fTargetModel = inTagretModel;

	if(this.fTargetContainer.getIndex(this.fTargetModel) === -1){
		this.fTargetContainer.add(this.fTargetModel);
	}

	this.fTargetModel.setData(inGameData, inIsTutorial, inColorData);

	InGameController.init(this.game, this.fTargetModel, inGameData.targetCount);
	this.dinoCharacter.show();
};

var ELocaleFailArray = [ELocale.FIRST_FAIL_TEXT_1, ELocale.FIRST_FAIL_TEXT_2, ELocale.FIRST_FAIL_TEXT_3];
InGameScene.prototype.playOops = function(){
	this.fOopsContainer.visible = true;
	this.fOopsContainer.alpha = 0;
	this.fOopsContainer.y = 454;
	this.game.time.events.add(300, function(){
		window.sounds.sound('voice_oops').play();
	}.bind(this));

	this.fTxtDec.text = StzTrans.translate(ELocaleFailArray[StzUtil.createRandomInteger(0, ELocaleFailArray.length-1)]);
	this.game.add.tween(this.fOopsContainer).to({y : 404}, 250, Phaser.Easing.Linear.None, true)
	.onUpdateCallback(function(inParam){
		if(inParam.target){
			this.fOopsContainer.alpha = Phaser.Math.mapLinear(inParam.target.y, 454, 404, 0, 1);
		}
	}.bind(this))
	.onComplete.addOnce(function(){
		this.game.time.events.add(300, function(){
			if(this.game){
				this.game.add.tween(this.fOopsContainer).to({alpha : 0}, 250, Phaser.Easing.Linear.None, true)
				.onComplete.addOnce(function(){
					this.game.state.getCurrentState().restartInGame();
				}.bind(this));
			}

		}.bind(this));

	}.bind(this));
};

InGameScene.prototype.superDestroy = InGameScene.prototype.destroy;
InGameScene.prototype.destroy = function(destroyChildren, soft) {
	this.superDestroy(destroyChildren, soft);
};