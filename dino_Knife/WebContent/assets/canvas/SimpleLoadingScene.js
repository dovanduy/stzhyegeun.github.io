
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * SimpleLoadingScene.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function SimpleLoadingScene(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _blindContainer = this.game.add.group(this);
	
	var _iconLoading = this.game.add.sprite(360, 520, 'mainAtlas', 'circle_loading.png', this);
	_iconLoading.scale.setTo(1.5, 1.5);
	_iconLoading.anchor.setTo(0.5, 0.5);
	
	var _txtProgress = this.game.add.text(360, 520, '1/4', {"font":"bold 20px Arial"}, this);
	_txtProgress.anchor.setTo(0.5, 0.5);
	
	
	
	// public fields
	
	this.fBlindContainer = _blindContainer;
	this.fIconLoading = _iconLoading;
	this.fTxtProgress = _txtProgress;
	/* --- post-init-begin --- */
	
	var progressFontStyle = {fontSize: "45px", font: "Lilita One", fill: "#ffffff"};
	this.fTxtProgress.setStyle(progressFontStyle);
	
	this.fBlind = this.game.add.graphics(0, 0);
	this.fBlind.beginFill(0x000000);
	this.fBlind.drawRect(0, 0, this.game.world.width, this.game.world.height);
	this.fBlind.inputEnabled = true;
	this.fBlind.alpha = 0.7;
	_blindContainer.add(this.fBlind);
	
	this.callbackTimeout = null;
	this.callbackContext = null;
	this.callbackObject = null;
	
	this.visible = false;
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var SimpleLoadingScene_proto = Object.create(Phaser.Group.prototype);
SimpleLoadingScene.prototype = SimpleLoadingScene_proto;
SimpleLoadingScene.prototype.constructor = SimpleLoadingScene;

/* --- end generated code --- */
// -- user code here --

SimpleLoadingScene.prototype.startLoading = function(inLoadingMessage) {
	
	var progMessage = inLoadingMessage || null;
	if (progMessage === null) {
		this.fTxtProgress.visible = false;
	} else {
		this.fTxtProgress.visible = true;
		this.fTxtProgress.text = inLoadingMessage;
	}
	
	this._stopTimeoutTimer();
	this._startLoadingTween();
	return this;
};

SimpleLoadingScene.prototype.setTimeout = function(inTimeoutSec, inTimeoutCallback, inTimeoutData, inContext) {
	
	var timeoutSec = inTimeoutSec || 0;
	if (timeoutSec > 0) {
		this._startTimeoutTimer(timeoutSec);
	}
	
	this.callbackTimeout = inTimeoutCallback;
	this.callbackContext = inContext;
	this.callbackObject = StzUtil.cloneObject(inTimeoutData);
	
	return {
		start: function(inLoadingMessage) {
			var progMessage = inLoadingMessage || null;
			if (progMessage === null) {
				this.fTxtProgress.visible = false;
			} else {
				this.fTxtProgress.visible = true;
				this.fTxtProgress.text = inLoadingMessage;
			}
			this._startLoadingTween();
		}.bind(this)
	};
};

SimpleLoadingScene.prototype.stopLoading = function() {
	this.visible = false;
	this._stopTimeoutTimer();
	this._stopLoadingTween();
};

SimpleLoadingScene.prototype._startTimeoutTimer = function(inTimeoutSec) {
	
	if (inTimeoutSec <= 0) {
		return;
	}
	
	this._stopTimeoutTimer();
	this.timeOutTimer = this.game.time.events.add(Phaser.Timer.SECOND * inTimeoutSec, function() {
		if (this.callbackTimeout) {
			this.callbackTimeout.call(this.callbackContext, this.callbackObject);
		}
		this._stopTimeoutTimer();
	}, this);
};

SimpleLoadingScene.prototype._stopTimeoutTimer = function() {
	if(this.timeOutTimer){
		this.game.time.events.remove(this.timeOutTimer);
		this.timeOutTimer = null;
	}
	this.callbackTimeout = null;
	this.callbackContext = null;
	this.callbackObject = null;
};

SimpleLoadingScene.prototype._stopLoadingTween = function() {
	if(this.loadingTween){
		this.game.tweens.remove(this.loadingTween);
		this.loadingTween = null;
		this.fIconLoading.rotation = 0;
	}
	this.visible = false;
};

SimpleLoadingScene.prototype._startLoadingTween = function() {
	this._stopLoadingTween();
	this.visible = true;
	this.loadingTween = this.game.add.tween(this.fIconLoading).to({rotation:Math.PI * 2}, 700, Phaser.Easing.Linear.None, true, 0, -1);
};

