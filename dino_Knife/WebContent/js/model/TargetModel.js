
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * TargetModel.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function TargetModel(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _bigTarget = this.game.add.group(this);
	_bigTarget.position.setTo(360, 372);
	_bigTarget.scale.setTo(0.8, 0.8);
	
	var _coinContainer = this.game.add.group(_bigTarget);
	
	var _obstacleContainer = this.game.add.group(_bigTarget);
	
	var _colliderContainer = this.game.add.group(_bigTarget);
	
	var _outGameOutLine = this.game.add.group(_bigTarget);
	
	var _green_leaf1_png1 = this.game.add.sprite(161, 151, 'mainAtlas', 'green_leaf.png', _outGameOutLine);
	_green_leaf1_png1.angle = 140.99061445222455;
	_green_leaf1_png1.scale.setTo(0.52, 0.52);
	_green_leaf1_png1.anchor.setTo(0.5, 0.5);
	
	var _green_leaf_png1 = this.game.add.sprite(-170, 137, 'mainAtlas', 'green_leaf.png', _outGameOutLine);
	_green_leaf_png1.angle = -135.59980124962092;
	_green_leaf_png1.scale.setTo(0.52, 0.52);
	_green_leaf_png1.anchor.setTo(0.5, 0.5);
	
	var _green_leaf1_png = this.game.add.sprite(149, -163, 'mainAtlas', 'green_leaf.png', _outGameOutLine);
	_green_leaf1_png.angle = 47.07413813339159;
	_green_leaf1_png.scale.setTo(0.52, 0.52);
	_green_leaf1_png.anchor.setTo(0.5, 0.5);
	
	var _green_leaf_png = this.game.add.sprite(-157, -152, 'mainAtlas', 'green_leaf.png', _outGameOutLine);
	_green_leaf_png.angle = -47.0595227180318;
	_green_leaf_png.scale.setTo(0.52, 0.52);
	_green_leaf_png.anchor.setTo(0.5, 0.5);
	
	var _green_wood_png = this.game.add.sprite(-222, 52, 'mainAtlas', 'green_wood.png', _outGameOutLine);
	_green_wood_png.angle = -97.96276732460841;
	_green_wood_png.scale.setTo(0.51, 0.51);
	_green_wood_png.anchor.setTo(0.5, 0.5);
	
	var _green_wood_png1 = this.game.add.sprite(223, -67, 'mainAtlas', 'green_wood.png', _outGameOutLine);
	_green_wood_png1.angle = -286.80223012801395;
	_green_wood_png1.scale.setTo(0.51, 0.51);
	_green_wood_png1.anchor.setTo(0.5, 0.5);
	
	var _outGameCoinContainer = this.game.add.group(_outGameOutLine);
	
	var _common_coin_png1 = this.game.add.sprite(208, 77, 'mainAtlas', 'common_coin.png', _outGameCoinContainer);
	_common_coin_png1.scale.setTo(0.5, 0.5);
	
	var _common_coin_png = this.game.add.sprite(-246, -93, 'mainAtlas', 'common_coin.png', _outGameCoinContainer);
	_common_coin_png.scale.setTo(0.4, 0.4);
	
	var _target = this.game.add.sprite(0, 0, 'mainAtlas', 'circle.png', _bigTarget);
	_target.scale.setTo(0.53, 0.53);
	_target.anchor.setTo(0.5, 0.5);
	_target.tint = 0x89ce1b;
	
	var _inGameContainer = this.game.add.group(_bigTarget);
	
	var _bossMouth = this.game.add.sprite(-25, 137, 'mainAtlas', 'boss_mouth.png', _inGameContainer);
	_bossMouth.scale.setTo(1.2, 1.2);
	
	var _bossLeftEyeOut = this.game.add.sprite(-57, 77, 'mainAtlas', 'particle_star.png', _inGameContainer);
	_bossLeftEyeOut.scale.setTo(0.65, 0.65);
	
	var _bossRightEyeOut = this.game.add.sprite(3, 77, 'mainAtlas', 'particle_star.png', _inGameContainer);
	_bossRightEyeOut.scale.setTo(0.65, 0.65);
	
	var _bossRightEyeIn = this.game.add.sprite(19, 104, 'mainAtlas', 'eye.png', _inGameContainer);
	_bossRightEyeIn.scale.setTo(0.51, 0.51);
	_bossRightEyeIn.anchor.setTo(0.5, 0.5);
	_bossRightEyeIn.tint = 0x1e9fbc;
	
	var _bossLeftEyeIn = this.game.add.sprite(-20, 104, 'mainAtlas', 'eye.png', _inGameContainer);
	_bossLeftEyeIn.scale.setTo(0.51, 0.51);
	_bossLeftEyeIn.anchor.setTo(0.5, 0.5);
	_bossLeftEyeIn.tint = 0x1e9fbc;
	
	var _bossEyeCoverContainer = this.game.add.group(_inGameContainer);
	
	var _bossEyeCoverShadow = this.game.add.sprite(-68, 73, 'mainAtlas', 'boss_eye_cover.png', _bossEyeCoverContainer);
	_bossEyeCoverShadow.scale.setTo(0.8, 0.8);
	_bossEyeCoverShadow.alpha = 0.5;
	
	var _bossEyeCover = this.game.add.sprite(-78, 63, 'mainAtlas', 'boss_eye_cover.png', _bossEyeCoverContainer);
	_bossEyeCover.scale.setTo(0.9, 0.9);
	
	var _outGameContainer = this.game.add.group(_bigTarget);
	
	var _circle = this.game.add.sprite(1, -30, 'mainAtlas', 'circle.png', _outGameContainer);
	_circle.scale.setTo(0.431, 0.431);
	_circle.anchor.setTo(0.5, 0.5);
	_circle.tint = 0xaee80f;
	
	var _outGameBossFaceContanier = this.game.add.group(_outGameContainer);
	
	var _rightEyeOut = this.game.add.sprite(29, -54, 'mainAtlas', 'circle.png', _outGameBossFaceContanier);
	_rightEyeOut.scale.setTo(0.07, 0.07);
	_rightEyeOut.anchor.setTo(0.5, 0.5);
	
	var _leftEyeOut = this.game.add.sprite(-29, -53, 'mainAtlas', 'circle.png', _outGameBossFaceContanier);
	_leftEyeOut.scale.setTo(0.07, 0.07);
	_leftEyeOut.anchor.setTo(0.5, 0.5);
	
	var _rightEyeIn = this.game.add.sprite(19, -54, 'mainAtlas', 'eye.png', _outGameBossFaceContanier);
	_rightEyeIn.scale.setTo(0.51, 0.51);
	_rightEyeIn.anchor.setTo(0.5, 0.5);
	_rightEyeIn.tint = 0x1e9fbc;
	
	var _leftEyeIn = this.game.add.sprite(-19, -54, 'mainAtlas', 'eye.png', _outGameBossFaceContanier);
	_leftEyeIn.scale.setTo(0.51, 0.51);
	_leftEyeIn.anchor.setTo(0.5, 0.5);
	_leftEyeIn.tint = 0x1e9fbc;
	
	var _green_mouth_png = this.game.add.sprite(-22, -21, 'mainAtlas', 'green_mouth.png', _outGameBossFaceContanier);
	_green_mouth_png.scale.setTo(0.5, 0.5);
	
	var _notRotateContainer = this.game.add.group(this);
	
	var _txtRemainContainer = this.game.add.group(this);
	
	
	
	// public fields
	
	this.fBigTarget = _bigTarget;
	this.fCoinContainer = _coinContainer;
	this.fObstacleContainer = _obstacleContainer;
	this.fColliderContainer = _colliderContainer;
	this.fOutGameOutLine = _outGameOutLine;
	this.fOutGameCoinContainer = _outGameCoinContainer;
	this.fTarget = _target;
	this.fInGameContainer = _inGameContainer;
	this.fBossMouth = _bossMouth;
	this.fBossLeftEyeOut = _bossLeftEyeOut;
	this.fBossRightEyeOut = _bossRightEyeOut;
	this.fBossRightEyeIn = _bossRightEyeIn;
	this.fBossLeftEyeIn = _bossLeftEyeIn;
	this.fBossEyeCoverContainer = _bossEyeCoverContainer;
	this.fBossEyeCoverShadow = _bossEyeCoverShadow;
	this.fBossEyeCover = _bossEyeCover;
	this.fOutGameContainer = _outGameContainer;
	this.fOutGameBossFaceContanier = _outGameBossFaceContanier;
	this.fRightEyeIn = _rightEyeIn;
	this.fLeftEyeIn = _leftEyeIn;
	this.fNotRotateContainer = _notRotateContainer;
	this.fTxtRemainContainer = _txtRemainContainer;
	/* --- post-init-begin --- */
 
	this.fBigTarget.x = 360;
	this.fBigTarget.y = 695;
	this.fBigTarget.scale.set(1.1);
	
	var remainCountFontStyle = {fontSize: '100px', fill: '#5757aa', font: 'Lilita One'};
	this.fTextRemainCount = this.game.add.text(0, 0, "", remainCountFontStyle, this.fTxtRemainContainer);
	this.fTextRemainCount.anchor.set(0.5);
	this.fTxtRemainContainer.visible = false;
	
	this.coinAnim = this.game.add.sprite(0, 0, 'coinAnim', 0, this.fCoinContainer);
	this.coinAnim.anchor.setTo(0.5);
	this.coinAnim.animations.add('play', [0, 1, 2, 3], 20, false);
	this.coinAnim.animations.currentAnim.onComplete.add(function(){
		this.coinAnim.visible = false;
	}.bind(this));
	this.coinAnim.visible = false;
    /* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var TargetModel_proto = Object.create(Phaser.Group.prototype);
TargetModel.prototype = TargetModel_proto;
TargetModel.prototype.constructor = TargetModel;

/* --- end generated code --- */
// -- user code here --
TargetModel.prototype.initTargetModel = function(){
	if(this.speedTween){
		this.game.tweens.remove(this.speedTween);
		this.speedTween = null;
	}
	
	if(this.resultTween){
		this.game.tweens.remove(this.resultTween);
		this.speedTween = null;
	}
	
	if(this.fNotRotateContainer){
		for(var i = 0; i < this.fNotRotateContainer.children.lenght; i++){
			this.fNotRotateContainer.remove(this.fNotRotateContainer.children[i]);
		}
	}
	
	this.fOutGameContainer.visible = false;
	this.fOutGameOutLine.visible = false;
	this.fInGameContainer.visible = false;
	this.fObstacleContainer.visible = false;
	this.fCoinContainer.visible = false;
	this.fColliderContainer.visible = false;
	this.fOutGameCoinContainer.visible = false;
	this.fOutGameBossFaceContanier.visible = false;
	this.fTxtRemainContainer.visible = false;
};

//////////////////////// 결과창 /////////////////////////////
TargetModel.prototype.targetInWinReult = function(){
	this.initTargetModel();

    this.fOutGameContainer.visible = true;
    this.fOutGameOutLine.visible = true;
    this.fOutGameBossFaceContanier.visible = true;
    
    this.fBigTarget.scale.set(0.85);
    this.fBigTarget.x = 360;
    this.fBigTarget.y = 540;
    this.fBigTarget.y = 551;
    
    this.fBigTarget.rotation = 0;
    this.fTarget.tint = 0x89ce1b;
    
    this.fBigTarget.remove(this.fOutGameBossFaceContanier);
	this.fNotRotateContainer.add(this.fOutGameBossFaceContanier);
	
	this.fOutGameBossFaceContanier.scale.set(this.fBigTarget.scale.x);
	this.fOutGameBossFaceContanier.x = this.fBigTarget.x;
	this.fOutGameBossFaceContanier.y = this.fBigTarget.y;
	
	this.fRightEyeIn.y = -54;
	this.fLeftEyeIn.y = -54;    
};

TargetModel.prototype.targetIdelMotionInWinReult = function(){
	var curScale = this.fBigTarget.scale.x;
	    
    targetMotion.call(this);
  
    function targetMotion(){
    	this.resultTween = this.game.add.tween(this.fBigTarget).to({rotation : -Math.PI/15}, 1000, Phaser.Easing.Linear.None, true, 0, 0, true);
    	this.resultTween.onUpdateCallback(function(inparm){
            if(inparm){
                this.fBigTarget.scale.set(Phaser.Math.mapLinear(inparm.target.rotation, 0, -Math.PI/10, curScale, curScale*1.05));
                this.fOutGameBossFaceContanier.y = Phaser.Math.mapLinear(inparm.target.rotation, 0, -Math.PI/10, this.fBigTarget.y, this.fBigTarget.y + 10);
            }
            preRotation = this.fBigTarget.rotation;
        }.bind(this))
        this.resultTween.onComplete.addOnce(function(){
        	this.resultTween = this.game.add.tween(this.fBigTarget).to({rotation : Math.PI/15}, 1000, Phaser.Easing.Linear.None, true, 0, 0, true)
            this.resultTween.onUpdateCallback(function(inparm){
                if(inparm){
                    this.fBigTarget.scale.set(Phaser.Math.mapLinear(inparm.target.rotation, 0, -Math.PI/10, curScale, curScale*1.05));
                    this.fOutGameBossFaceContanier.y = Phaser.Math.mapLinear(inparm.target.rotation, 0, -Math.PI/10, this.fBigTarget.y, this.fBigTarget.y + 10);
                }
                preRotation = this.fBigTarget.rotation;
            }.bind(this))
            this.resultTween.onComplete.addOnce(function(){
                targetMotion.call(this);
            }.bind(this));
        }.bind(this));
    }
};
///////////////////////////////////////////////////////////////////////////////

TargetModel.prototype.targetDownAnimation = function(inCompleteCallback, isNotTween){
	this.fOutGameContainer.visible = true;
	this.fOutGameOutLine.visible = true;
	this.fInGameContainer.visible = false;
	this.fTarget.tint = 0x89ce1b;

	if(isNotTween === true){
		this.fBigTarget.y = 1450;
		this.fBigTarget.scale.set(2);
		this.fOutGameBossFaceContanier.y = -90;
		this.fRightEyeIn.y = -62;
		this.fLeftEyeIn.y  = -62;
		
		if(inCompleteCallback){
			inCompleteCallback();
		}
		return;
	}
	
	var moveY = 1450;
	
	this.game.add.tween(this.fBigTarget).to({y:moveY}, 1500, Phaser.Easing.Quadratic.Out, true)
	.onUpdateCallback(function(inParam){
		if(inParam.target.y){
			var scale = Phaser.Math.mapLinear(inParam.target.y, 695, moveY, 1.1, 2);
			this.fBigTarget.scale.set(scale);
			
			this.fOutGameBossFaceContanier.y = Phaser.Math.mapLinear(inParam.target.y, 695, moveY, 0, -90);
			this.fRightEyeIn.y = Phaser.Math.mapLinear(inParam.target.y, 695, moveY, -54, -62);
			this.fLeftEyeIn.y = Phaser.Math.mapLinear(inParam.target.y, 695, moveY, -54, -62);
		}
	}.bind(this))
	.onComplete.addOnce(function(){
		if(inCompleteCallback){
			inCompleteCallback();
		}
	}.bind(this));
};

/////////////////////////// INGAME //////////////////////////////////////
TargetModel.prototype.setData = function(inGameData, inIsTutorial, inColorData){
	this.initTargetModel();
	
	var coinCount = inGameData.coinNum;
	var obstacleCount = inGameData.objectNum;
	var obstacleSize = inGameData.objectSize*0.9;
	this.fTargetScale = inGameData.trageSize*0.9;
	
	this.setTargetByInGame(inColorData);
	
	this.fTarget.hitArea = new Phaser.Circle(this.fBigTarget.x, this.fBigTarget.y, 400*this.fTargetScale + 150);
	
	var angle = Math.PI*2/obstacleCount;
	var coinAngle = 0;

	this.fTxtRemainContainer.x = this.fBigTarget.x;
	this.fTxtRemainContainer.y = this.fBigTarget.y - this.fBigTarget.height*0.2;
	this.fTextRemainCount.scale.set(this.fTargetScale);
	this.fTextRemainCount.text = inGameData.targetCount;
	//장애물 생성
	for(var i = 0; i < obstacleCount; i++){
		var obstacle = PoolManager.pool[PoolObjectName.OBSTACLE].loadView(this.game);
		obstacle.scale.set(obstacleSize*0.9);
		obstacle.anchor.set(0.5);
		obstacle.tint = this.obstacleTint;
		obstacle.rotation = angle*i + Math.PI/2;
		//obstacleSize의 값이 커지면 위치 이상해지는 부분 수정
		if(obstacleSize <= 0.5){
			obstacle.x = 200*Math.cos(angle*i + Math.PI/2);
			obstacle.y = 200*Math.sin(angle*i + Math.PI/2);

		}
		else{
			obstacle.x = ((200 - (obstacleSize-1)*20))*Math.cos(angle*i + Math.PI/2);
			obstacle.y = ((200 - (obstacleSize-1)*20))*Math.sin(angle*i + Math.PI/2);

		}

		var graphics = PoolManager.pool[PoolObjectName.COLLIDER].loadView(this.game);
		graphics.lineStyle(2, 0x00ff00, (StzGameConfig.COLLIDER_MODE === true)? 1 : 0);
		graphics.drawCircle(0, 0, 60*obstacleSize);
		graphics.hitArea = new Phaser.Circle(obstacle.x, obstacle.y, 65*obstacleSize*this.fTargetScale);
		graphics.x = obstacle.x;
		graphics.y = obstacle.y;
		
		this.fObstacleArray.push({'image' : obstacle, 'collider' : graphics});
		//코인 생성 (장애물 사이에 동일한 간격으로 생성)
		for(var j = 0; j < coinCount; j++){
			var coinObject = PoolManager.pool[PoolObjectName.COIN].loadView(this.game);
			coinObject.scale.set(0.4);
			coinObject.anchor.set(0.5);
			coinAngle = angle*i + ((angle*(i+1) - angle*i)/(coinCount+1) *(j+1)) + Math.PI/2;
			coinObject.rotation = coinAngle;
			coinObject.x =	(240)*Math.cos(coinAngle);
			coinObject.y =  (240)*Math.sin(coinAngle);

			var coinCollider = PoolManager.pool[PoolObjectName.COLLIDER].loadView(this.game);
			coinCollider.lineStyle(2, 0x00ff00, (StzGameConfig.COLLIDER_MODE === true)? 1 : 0);
			coinCollider.drawCircle(0, 0, 35);
			coinCollider.hitArea = new Phaser.Circle(coinObject.x, coinObject.y, 35*this.fTargetScale);
			coinCollider.x = (200)*Math.cos(coinAngle);
			coinCollider.y = (200)*Math.sin(coinAngle);

			this.fCointArray.push({'image' : coinObject, 'collider' : coinCollider});
		}
	}

	//장애물 없을 때 코인 생성
	if(obstacleCount === 0){
		coinAngle =  Math.PI*2/coinCount;
		for(var i = 0; i < coinCount; i++){
			var coinObject = PoolManager.pool[PoolObjectName.COIN].loadView(this.game);
			coinObject.scale.set(0.4);
			coinObject.anchor.set(0.5);
			coinObject.rotation = coinAngle*i + Math.PI/2;
			coinObject.x = (240)*Math.cos(coinAngle*i + Math.PI/2);
			coinObject.y = (240)*Math.sin(coinAngle*i + Math.PI/2 );

			var coinCollider = PoolManager.pool[PoolObjectName.COLLIDER].loadView(this.game);
			coinCollider.lineStyle(2, 0x00ff00, (StzGameConfig.COLLIDER_MODE === true)? 1 : 0);
			coinCollider.drawCircle(0, 0, 35);
			coinCollider.hitArea = new Phaser.Circle(coinObject.x, coinObject.y, 35*this.fTargetScale);
			coinCollider.x = (200)*Math.cos(coinAngle*i + Math.PI/2);
			coinCollider.y = (200)*Math.sin(coinAngle*i + Math.PI/2);

			this.fCointArray.push({'image' : coinObject, 'collider' : coinCollider});
		}
	}
	this.fRotateData = inGameData.pattern;
	
	//인게임 시작 애니매이션

	this.scale.set(0.8);
	this.fInGameContainer.scale.set(1.5);
	this.fInGameContainer.y -= 200;
	this.fBossEyeCoverContainer.y -= 15;
	this.fObstacleContainer.visible = false;
	this.game.add.tween(this.fBossEyeCoverContainer).to({y:0}, 1000, Phaser.Easing.Quartic.In, true);
	this.game.add.tween(this.scale).to({x:1, y:1}, 800, Phaser.Easing.Linear.None, true)
	.onUpdateCallback(function(inparm){
		if(inparm){
			this.fInGameContainer.y = Phaser.Math.mapLinear(inparm.target.x, 0.8, 1, -200, 0);
			this.fInGameContainer.scale.set(Phaser.Math.mapLinear(inparm.target.x, 0.8, 1, 1.5, 1));
		}
	}.bind(this))
	.onComplete.addOnce(function(){
		this.fInGameContainer.y = 0;
			this.game.add.tween(this.scale).to({x:1.05, y:1.05}, 250, Phaser.Easing.Linear.None, true, 0, 0, true)
			.onComplete.addOnce(function(){
				this.fBigTarget.remove(this.fInGameContainer);
				this.fInGameContainer.x = this.fBigTarget.x;
				this.fInGameContainer.y = this.fBigTarget.y;
				this.fInGameContainer.scale.set(this.fBigTarget.scale.x, this.fBigTarget.scale.x);
				this.fNotRotateContainer.add(this.fInGameContainer);
				this.updateSpeed();
	
				if(inIsTutorial === true){
					this.game.state.getCurrentState().toggleTutorialScene();
				}
				else{
					InGameController.setIsPlay(true);
				}

				this.fTxtRemainContainer.visible = true;
			}.bind(this));
			
			this.fObstacleContainer.visible = true;
			for(var i =0; i < this.fObstacleArray.length; i++){
				this.fObstacleArray[i].image.anchor.set(0.9);
				this.game.add.tween(this.fObstacleArray[i].image.anchor).to({x:0.5, y:0.5}, 250, Phaser.Easing.Linear.None, true);
			}
	}.bind(this));
};

TargetModel.prototype.collisonEffect = function(){
	var effectEmitter = this.game.add.emitter(this.fBigTarget.x, this.fBigTarget.y + this.fTarget.height/2, 5);
	effectEmitter.width = 50;
	effectEmitter.makeParticles('mainAtlas', 'particle_square.png', 5);
	
	for(var i = 0; i<effectEmitter.children.length; i++){
		effectEmitter.children[i].tint = this.fTarget.tint;
	}
	effectEmitter.minParticleScale = 0.075;
	effectEmitter.maxParticleScale = 0.15;
	effectEmitter.setYSpeed(100, 500);
	
	var direction  = 1;
	if(this.fTargetSpeed >= 0){
		direction = -1;
	}
	effectEmitter.setXSpeed(direction*100, direction*400);
	effectEmitter.start(true, 500, null, 5);
	
	this.game.time.events.add(500, function(){
		effectEmitter.destroy();
	}.bind(this, effectEmitter));
};
TargetModel.prototype.playCoinAnim = function(inCoin){
	this.coinAnim.visible = true;
	this.coinAnim.x = inCoin.image.x;
	this.coinAnim.y = inCoin.image.y;
	this.coinAnim.play('play');
};

TargetModel.prototype.setTargetByInGame = function(inColorData){
	this.fInGameContainer.visible = true;
	this.fObstacleContainer.visible = true;
	this.fCoinContainer.visible = true;
	this.fColliderContainer.visible = true;
	
	this.fRightEyeIn.y = -54;
	this.fLeftEyeIn.y = -54;
	this.fBossEyeCoverShadow.tint = 0x000000;
	this.fBossLeftEyeOut.tint = 0xffffff;
	this.fBossRightEyeOut.tint = 0xffffff;
	this.fBossMouth.tint = 0x4f4f4f;
	this.fTarget.tint = inColorData.bossMain;
	this.fBossEyeCover.tint = this.fTarget.tint;
	this.fBossLeftEyeIn.tint = inColorData.bossEye;
	this.fBossRightEyeIn.tint = inColorData.bossEye;
	
	this.obstacleTint = inColorData.obstacle;
	this.fTextRemainCount.fill = inColorData.remainText;
	
	this.fBigTarget.rotation = 0;
	this.fBigTarget.x = 360;
	this.fBigTarget.y = 372;
	this.fBigTarget.scale.set(this.fTargetScale);

	this.x = this.fBigTarget.x;
	this.y = this.fBigTarget.y;

	this.pivot.x = this.fBigTarget.x;
	this.pivot.y = this.fBigTarget.y;
	
	this.objectDestroy();
	
	this.fObstacleArray = [];
	this.fCointArray = [];

	this.fInGameContainer.x = 0;
	this.fInGameContainer.y = 0;
	this.fBossEyeCoverContainer.x = 0;
	this.fBossEyeCoverContainer.y = 0;
	
    this.fTargetSpeed = 0;
    this.fDestination = 0;
    this.fCurDataIndex = 0;
    
	if(this.fBigTarget.getIndex(this.fInGameContainer) === -1){
		this.fInGameContainer.parent.remove(this.fInGameContainer);
		this.fBigTarget.add(this.fInGameContainer);
	}
	
};

TargetModel.prototype.updateSpeed = function(inEndCharacters){
	var curFps = 50;
	if(this.speedTween){
		this.game.tweens.remove(this.speedTween);
		this.speedTween = null;
	}
	var time = 0;
	if(this.fRotateData[this.fCurDataIndex].speed === 0){
		var preRotation = this.fBigTarget.rotation;
		time =  (this.fRotateData[this.fCurDataIndex].dest/this.fTargetSpeed*2*1000)/curFps;
		this.speedTween = this.game.add.tween(this.fBigTarget).to({rotation : this.fBigTarget.rotation + this.fRotateData[this.fCurDataIndex].dest}, time, Phaser.Easing.Quadratic.Out, true);
		this.speedTween.onUpdateCallback(function(){
			var gap = this.fBigTarget.rotation - preRotation;

			for (var i = 0; i < inEndCharacters.length; i++) {
				inEndCharacters[i].rotation += gap;	
			}
			preRotation = this.fBigTarget.rotation;
		}.bind(this, preRotation));
		this.speedTween.onComplete.addOnce(function(){
			this.fCurDataIndex++;
			this.fTargetSpeed = 0;
			this.fDestination = 0;
			if(this.fCurDataIndex === this.fRotateData.length){
				this.fCurDataIndex = 0;
			}
			this.updateSpeed();
		}.bind(this,time));
	}
	else{
		time = 1000;
		this.speedTween = this.game.add.tween(this).to({fTargetSpeed : this.fRotateData[this.fCurDataIndex].speed/curFps}, time, Phaser.Easing.Linear.None, true);
	}
};

TargetModel.prototype.updateRotate = function(inEndCharacters){
	var curFps = 60;
	if(this.fRotateData[this.fCurDataIndex].speed === 0){
		return;
	}
	
	if(this.fRotateData[this.fCurDataIndex].speed === -1){

		this.fTargetSpeed = 0;
		this.fDestination += Math.PI*2/curFps;
	}
	else{
		this.fDestination += this.fTargetSpeed;
	}

	for (var i = 0; i < inEndCharacters.length; i++) {
		inEndCharacters[i].rotation += this.fTargetSpeed;	
	}
	
	this.fBigTarget.rotation += this.fTargetSpeed;

	if(Math.abs(this.fRotateData[this.fCurDataIndex].dest) <= Math.abs(this.fDestination)){
		if(this.fRotateData[this.fCurDataIndex].speed !== -1){
			var preRotation = this.fBigTarget.rotation;
			this.fBigTarget.rotation = this.fBigTarget.rotation - this.fDestination + this.fRotateData[this.fCurDataIndex].dest;

			var gap = this.fBigTarget.rotation - preRotation;
			
			for (var i = 0; i < inEndCharacters.length; i++) {
				inEndCharacters[i].rotation += gap;	
			}
		}
		this.fCurDataIndex++;

		this.fDestination = 0;
		if(this.fCurDataIndex === this.fRotateData.length){
			this.fCurDataIndex = 0;
		}
		if(this.fRotateData[this.fCurDataIndex].speed !== -1){
			this.updateSpeed(inEndCharacters);
		}
	}
	
};

TargetModel.prototype.getRotateSpeed = function(){
	return this.fTargetSpeed;
};

TargetModel.prototype.getTargetScale = function(){
	return this.fTargetScale;
};

TargetModel.prototype.getMainTarget = function(){
	return this.fTarget;
};

TargetModel.prototype.getObstacleArray = function(){
	return this.fObstacleArray;
};

TargetModel.prototype.getCoinArray = function(){
	return this.fCointArray;
};

TargetModel.prototype.objectDestroy = function(){
	if(this.fObstacleArray){
		for(var i = 0; i < this.fObstacleArray.length; i++){
			if(this.fObstacleArray[i].image){
				PoolManager.pool[PoolObjectName.OBSTACLE].unloadView(this.fObstacleArray[i].image);
			}
			
			if(this.fObstacleArray[i].collider){
				PoolManager.pool[PoolObjectName.COLLIDER].unloadView(this.fObstacleArray[i].collider);
			}
		}
	}

	if(this.fCointArray){
		for(var i = 0; i < this.fCointArray.length; i++){
			if(this.fCointArray[i].image){
				PoolManager.pool[PoolObjectName.COIN].unloadView(this.fCointArray[i].image);
			}
			
			if(this.fCointArray[i].collider){
				PoolManager.pool[PoolObjectName.COLLIDER].unloadView(this.fCointArray[i].collider);
			}
		}
	}
	
};