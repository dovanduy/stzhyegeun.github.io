
// -- user code here --
DinoRunz.viewBound = new Phaser.Rectangle(0, 0, 0, 0);
/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * TileView.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function TileView(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _tile = this.game.add.sprite(0, 0, 'resAtlas', 'road_tile_1.png', this);
	_tile.anchor.setTo(0.5, 0.5);
	
	var _goalStart = this.game.add.sprite(0, 0, 'resAtlas', 'road_tile_goal.png', this);
	_goalStart.angle = -90.0;
	_goalStart.anchor.setTo(0.5, 0.5);
	
	var _goalEnd = this.game.add.sprite(0, 0, 'resAtlas', 'road_tile_goal.png', this);
	_goalEnd.angle = 90.0;
	_goalEnd.anchor.setTo(0.5, 0.5);
	
	var _arrow = this.game.add.sprite(0, 0, 'resAtlas', 'road_tile_arrow_gray.png', this);
	_arrow.angle = 90.0;
	_arrow.anchor.setTo(0.5, 0.5);
	
	var _text = this.game.add.text(0, 0, 'START', {"font":"bold 65px Blogger Sans","fill":"#00add2"}, this);
	_text.angle = 90.0;
	_text.anchor.setTo(0.5, 0.5);
	
	var _jewel = this.game.add.sprite(0, 0, 'resAtlas', 'icon_crystal02.png', this);
	_jewel.scale.setTo(0.5, 0.5);
	_jewel.anchor.setTo(0.5, 0.5);
	
	var _iconSkip = this.game.add.sprite(0, 0, 'commandFail', 0, this);
	_iconSkip.angle = 90.0;
	_iconSkip.scale.setTo(1.3, 1.3);
	_iconSkip.anchor.setTo(0.5, 0.5);
	_iconSkip.animations.add('skip', [0, 1, 2, 3, 4, 5], 20, false);
	
	var _groupHardEffect = this.game.add.group(this);
	
	var _hardStageEffect = this.game.add.sprite(0, 0, 'hardstageEffect', 0, _groupHardEffect);
	_hardStageEffect.angle = 90.0;
	_hardStageEffect.scale.setTo(1.2, 1.2);
	_hardStageEffect.anchor.setTo(0.5, 0.5);
	_hardStageEffect.animations.add('hard', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 30, false);
	
	var _txtHardStage = this.game.add.text(0, 0, '999', {"font":"bold 52px Blogger Sans","fill":"#ffffff"}, _groupHardEffect);
	_txtHardStage.angle = 90.0;
	_txtHardStage.anchor.setTo(0.5, 0.5);
	
	
	
	// public fields
	
	this.fTile = _tile;
	this.fGoalStart = _goalStart;
	this.fGoalEnd = _goalEnd;
	this.fArrow = _arrow;
	this.fText = _text;
	this.fJewel = _jewel;
	this.fIconSkip = _iconSkip;
	this.fGroupHardEffect = _groupHardEffect;
	this.fHardStageEffect = _hardStageEffect;
	this.fTxtHardStage = _txtHardStage;
	/* --- post-init-begin --- */
	
	this.prevPath = null;
	this.nextPath = null;
	
	this.direction = EDirection.RIGHT;
	this.tileType = ETileType.NONE;
	
	this.tileIndex = 0;
	this.indexInStage = 0;
	
	this.prevType = ETileType.NONE;
	this.nextType = ETileType.NONE;
	
	this.fGroupHardEffect.visible = false;
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var TileView_proto = Object.create(Phaser.Group.prototype);
TileView.prototype = TileView_proto;
TileView.prototype.constructor = TileView;

/* --- end generated code --- */
// -- user code here --

TileView.prototype.setPrevPath = function(inPath) {
    this.prevPath = inPath;
	this.prevType = inPath.tileType;
	this.updateView();
};

TileView.prototype.setNextPath = function(inPath) {
    this.nextPath = inPath;
    this.nextType = inPath.tileType;
	this.updateView();
};

TileView.prototype.updateView = function() {
	
	if (this.tileType === ETileType.START || this.tileType === ETileType.GOAL) {
		return;
	}
	
	this.fTile.scale.x = (this.tileType === ETileType.GOAL ? 5 : 1);
	if (this.nextType === ETileType.NONE && this.prevType === ETileType.NONE) {
		this.fTile.loadTexture("resAtlas", "road_tile_4.png");
	} else if (this.nextType === ETileType.NONE) {
		if(this.tileType !== ETileType.END) {
			this.fTile.loadTexture("resAtlas", "road_tile_1.png");
			this.fTile.scale.x = (this.tileType === ETileType.GOAL ? -5 : -1);
		} 
	} else if (this.prevType === ETileType.NONE) {
		this.fTile.loadTexture("resAtlas", "road_tile_1.png");
	} else {
		if (this.tileType === ETileType.DIRECTION_DOWN
				|| this.tileType === ETileType.DIRECTION_LEFT
				|| this.tileType === ETileType.DIRECTION_RIGHT
				|| this.tileType === ETileType.DIRECTION_UP) {
			this.fTile.loadTexture("resAtlas", "road_tile_3.png");
			
			//모서리 방향 설정.
			if(this.tileType === ETileType.DIRECTION_LEFT) {
				this.fTile.scale.y = -1;
			}
			else if(this.tileType === ETileType.DIRECTION_UP) {
				if(this.prevPath.direction === EDirection.RIGHT) this.fTile.scale.y = -1; 
			}
			else if(this.tiletype === ETileType.DIRECTION_DOWN) {
				if(this.prevPath.direction === EDirection.LEFT) this.fTile.scale.y = -1;
			}

		} else {
			this.fTile.loadTexture("resAtlas", "road_tile_2.png");	
		}
	}
};

TileView.prototype.getViewBound = function() {
	var width = (this.tileType === ETileType.GOAL ? DinoRunz.GameConfig.basicTile_WH * 10 : DinoRunz.GameConfig.basicTile_WH);
	var height = (this.tileType === ETileType.SLIM ? 47.5 : DinoRunz.GameConfig.basicTile_WH);
	width = (this.tileType === ETileType.START) ? width * 2 : width;
	height = (this.tileType === ETileType.START) ? height * 2 : height;
	
	if (this.direction === EDirection.UP || this.direction === EDirection.DOWN) {
		//set viewBound
		DinoRunz.viewBound.x = this.position.x - height / 2;
		DinoRunz.viewBound.y = this.position.y - width / 2;
		DinoRunz.viewBound.width = height;
		DinoRunz.viewBound.height = width;
		
		return DinoRunz.viewBound;
	}
	
	DinoRunz.viewBound.x = this.position.x - width / 2;
	DinoRunz.viewBound.y = this.position.y - height / 2;
	DinoRunz.viewBound.width = width;
	DinoRunz.viewBound.height = height;
	
	return DinoRunz.viewBound;
};

TileView.prototype.setCommandVisible = function(inValue) {
	this.fArrow.visible = inValue;
};

TileView.prototype.setCommandSkipped = function() {
    if (this.fArrow.visible === false) {
        return;
    }
    
    this.fIconSkip.visible = true;
	this.fIconSkip.animations.play("skip", 20, false, false);
	
	this.fArrow.visible = false;
};

TileView.prototype.setCommandEnable = function(inValue) {
	if(inValue) {
		this.fArrow.loadTexture("resAtlas", "road_tile_arrow.png");
	} else {
		this.fArrow.loadTexture("resAtlas", "road_tile_arrow_gray.png");
	}
};

TileView.prototype.kill = function() {
	this.alive = false;
    this.exists = false;
    this.visible = false;
    this.tileIndex = -1;
    this.indexInStage = -1;
    
    if (this.deadView) {
        this.deadView.kill();
        this.deadView = null;
    }
};

TileView.prototype.reset = function() {
	this.alive = true;
    this.exists = true;
    this.visible = true;
    
    this.prevPath = null;
    this.nextPath = null;
    this.prevType = ETileType.NONE;
	this.nextType = ETileType.NONE;
	
	this.fGroupHardEffect.visible = false;
};

TileView.prototype.getIndex = function() {
	return this.tileIndex;
};

TileView.prototype.getIndexInStage = function() {
    return this.indexInStage;
};

TileView.prototype.getType = function() {
	return this.tileType;
};

TileView.prototype.isJewelActive = function() {
	return this.fJewel.visible;
};

TileView.prototype.setJewelActive = function(inValue) {
	this.fJewel.visible = inValue;
};

TileView.prototype.setType = function(inTileType) {
	this.tileType = inTileType;
	this.fTile.scale.set(1);
	this.fTile.loadTexture("resAtlas", "road_tile_2.png");
	this.fJewel.visible = false;
	this.fGoalStart.visible = this.fGoalEnd.visible = false;
	this.fIconSkip.visible = false;
	this.setCommandEnable(false);
	
	switch(inTileType) {
	case ETileType.DIRECTION_RIGHT:
		this.visible = true;
		this.fArrow.visible = true;
		this.fText.visible = false;
		break;
	case ETileType.DIRECTION_DOWN:
		this.visible = true;
		this.fArrow.visible = true;
		this.fText.visible = false;
		this.setDirection(EDirection.DOWN);
		break;
	case ETileType.DIRECTION_LEFT:
		this.visible = true;
		this.fArrow.visible = true;
		this.fText.visible = false;
		this.setDirection(EDirection.LEFT);
		break;
	case ETileType.DIRECTION_UP:
		this.visible = true;
		this.fArrow.visible = true;
		this.fText.visible = false;
		this.setDirection(EDirection.UP);
		break;
	case ETileType.NONE:
		this.visible = false;
		break;
	case ETileType.NORMAL:
		this.visible = true;
		this.fText.visible = false;
		this.fArrow.visible = false;
		this.fJewel.visible = true;
		this.fTile.loadTexture("resAtlas", "road_tile_2.png");
		break;
	case ETileType.SLIM:
		this.visible = true;
		this.fText.visible = false;
		this.fArrow.visible = false;
		this.fTile.loadTexture("resAtlas", "road_tile_2.png");
		this.fTile.scale.y = 0.5;
		break;
	case ETileType.START:
		this.visible = true;
		this.fArrow.visible = false;
		this.fText.visible = true;
		this.fTile.loadTexture("resAtlas", "road_tile_6.png");
		break;
	case ETileType.GOAL:
		this.visible = true;
		this.fArrow.visible = false;
		this.fText.visible = false;
		this.fTile.scale.x = 10;
		this.fGoalStart.visible = true;
		this.fGoalStart.position.setTo(-427.5, 0);
		this.fGoalEnd.position.setTo(380, 0);
		break;
	case ETileType.END:
		this.visible = true;
		this.fArrow.visible = false;
		this.fText.visible = true;
		this.fText.text = "END";
		this.fTile.loadTexture("resAtlas", "road_tile_6.png");
		break;
	}
};

// TileView.prototype.isOnTile = function(inX, inY) {
// 	return this.fTile.getBounds().contains(inX, inY);
// };

TileView.prototype.getNextPosition = function(inNextType) {
	var resultPosition = new Phaser.Point(this.x, this.y);
	
	var goalOffset = (this.tileType === ETileType.GOAL || inNextType === ETileType.GOAL ? 5.5 : 1);
	var startOffest = (this.tileType === ETileType.START) ? 1.4 : 1;
	
	switch (this.direction) {
	case EDirection.RIGHT:
		resultPosition.x += (DinoRunz.GameConfig.basicTile_WH * goalOffset * startOffest);
		break;
	case EDirection.DOWN:
		resultPosition.y += (DinoRunz.GameConfig.basicTile_WH * goalOffset * startOffest);
		break;
	case EDirection.LEFT:
		resultPosition.x -= (DinoRunz.GameConfig.basicTile_WH * goalOffset * startOffest);
		break;
	case EDirection.UP:
		resultPosition.y -= (DinoRunz.GameConfig.basicTile_WH * goalOffset * startOffest);
		break;
	}
	return resultPosition;
};

TileView.prototype.checkDeadPositionView = function(inPlayer) {
    //if (this.deadView && this.deadView.getProfileInfo().getPlatformId() == PlayerDataManager.profileInfo.getPlatformId()) {
    if (this.deadView) {
        this.deadView.kill();
        this.deadView = null;
    }
};

TileView.prototype.setDeadView = function(inDeadView) {
    if (!inDeadView) {
        return;
    }
    
    this.deadView = inDeadView;
};

TileView.prototype.updatePosition = function(inOffsetX, inOffsetY) {
    this.position.x += inOffsetX;
    this.position.y += inOffsetY;
    
    if (this.deadView) {
        this.deadView.position.set(this.position.x, this.position.y);
    }
};

TileView.prototype.setDirection = function(inDirection) {
	
	this.direction = inDirection;
	
	switch (inDirection) {
	case EDirection.RIGHT:
		this.angle = 0;
		this.fJewel.angle = 0;
		break;
	case EDirection.DOWN:
		this.angle = 90;
		this.fJewel.angle = -90;
		break;
	case EDirection.LEFT:
		this.angle = 180;
		this.fJewel.angle = 180;
		break;
	case EDirection.UP:
		this.angle = 270;
		this.fJewel.angle = 90;
		break;
	default:
		this.angle = 0;
		this.fJewel.angle = 0;
		this.direction = EDirection.RIGHT;
		break;
	}
};

TileView.prototype.showHardEffect = function (stage) {
	this.fGroupHardEffect.visible = true;
	this.fHardStageEffect.animations.play("hard", 30);
	this.fTxtHardStage.text = stage;

	this.fText.visible = false;
};