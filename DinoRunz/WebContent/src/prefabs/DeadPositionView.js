
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * DeadPositionView.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function DeadPositionView(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _img_userDeadPoint_png = this.game.add.sprite(89, -88, 'MenuScene', 'img_userDeadPoint.png', this);
	_img_userDeadPoint_png.anchor.setTo(0.5, 0.5);
	
	var _img_yellowArrow_png = this.game.add.sprite(0, 0, 'MenuScene', 'img_yellowArrow.png', this);
	_img_yellowArrow_png.angle = 45.0;
	_img_yellowArrow_png.anchor.setTo(0.5, 1.0);
	
	var _imgProfile = this.game.add.sprite(89, -88, 'MenuScene', 'default_thumb.png', this);
	_imgProfile.scale.setTo(1.6, 1.6);
	_imgProfile.anchor.setTo(0.5, 0.5);
	
	var _img_ingameFaceFrame_png = this.game.add.sprite(89, -88, 'MenuScene', 'img_ingameFaceFrame.png', this);
	_img_ingameFaceFrame_png.anchor.setTo(0.5, 0.5);
	
	
	
	// public fields
	
	this.fImgProfile = _imgProfile;
	/* --- post-init-begin --- */
	this.maskWidth = _img_ingameFaceFrame_png.width;
	var maskProfile = this.game.add.graphics(_img_ingameFaceFrame_png.x, _img_ingameFaceFrame_png.y, this);
	maskProfile.beginFill(0x000000);
    maskProfile.drawCircle(0, 0, _img_ingameFaceFrame_png.width);
    maskProfile.endFill();
    
    this.fImgProfile.mask = maskProfile;
	
	this.targetProfileInfo = null;
	
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var DeadPositionView_proto = Object.create(Phaser.Group.prototype);
DeadPositionView.prototype = DeadPositionView_proto;
DeadPositionView.prototype.constructor = DeadPositionView;

/* --- end generated code --- */
// -- user code here --

DeadPositionView.prototype.setProfileInfo = function(inValue) {
    if (!inValue) {
        return;
    }
    this.targetProfileInfo = inValue;
    
    this.targetProfileInfo.loadProfileImage(this.game, function(inImageKey) {
        this.fImgProfile.loadTexture(inImageKey);
        
        var scaleRatio = this.maskWidth / this.fImgProfile.width;
        this.fImgProfile.scale.set(scaleRatio * this.fImgProfile.scale.x);
    }, this);
};

DeadPositionView.prototype.getProfileInfo = function() {
    return this.targetProfileInfo;
};

DeadPositionView.prototype.kill = function() {
    this.alive = false;
    this.exists = false;
    this.visible = false;
};

DeadPositionView.prototype.reset = function() {
    this.alive = true;
    this.exists = true;
    this.visible = true;
    
    this.fImgProfile.loadTexture("MenuScene", "default_thumb.png");
    this.fImgProfile.scale.set(2.5);
    
    this.rotation = 0;
    this.scale.set(1);
};

