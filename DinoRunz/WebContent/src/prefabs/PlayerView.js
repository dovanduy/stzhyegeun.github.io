
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * PlayerView.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function PlayerView(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _playerContainer = this.game.add.group(this);
	
	var _arrow = this.game.add.sprite(0, 0, 'auhaSheet1', 0, _playerContainer);
	_arrow.angle = 90.0;
	_arrow.scale.setTo(1.8, 1.8);
	_arrow.anchor.setTo(0.5, 0.5);
	var _arrow_run = _arrow.animations.add('run', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 30, true);
	_arrow_run.play();
	
	var _getCrown = this.game.add.sprite(122, 0, 'getGoldCrown', 0, _playerContainer);
	_getCrown.angle = 90.0;
	_getCrown.scale.setTo(2.0, 2.0);
	_getCrown.anchor.setTo(0.5, 0.5);
	_getCrown.animations.add('getCrown', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 20, false);
	
	
	
	// public fields
	
	this.fPlayerContainer = _playerContainer;
	this.fArrow = _arrow;
	this.fArrow_run = _arrow_run;
	this.fGetCrown = _getCrown;
	/* --- post-init-begin --- */
	
	this.fGetCrown.visible = false;
	var animGetCrown = this.fGetCrown.animations.getAnimation("getCrown");
	animGetCrown.onComplete.add(function() {
		this.fGetCrown.visible = false;
	}, this);
	// attribute
	this.jumpState = 0;
	this.currentIndex = 0;
	this.jumpRemainDistance = 0;
	this.speed = DinoRunz.GameConfig.min_speed;
	
	// setting logic
	this.setDirection(EDirection.UP);
	
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var PlayerView_proto = Object.create(Phaser.Group.prototype);
PlayerView.prototype = PlayerView_proto;
PlayerView.prototype.constructor = PlayerView;

/* --- end generated code --- */
// -- user code here --
PlayerView.JUMP_SCALE = 1.5;

PlayerView.prototype.setSpeed = function(inSpeed) {
	this.speed = (inSpeed < DinoRunz.GameConfig.min_speed ? DinoRunz.GameConfig.min_speed : (inSpeed > DinoRunz.GameConfig.max_speed ? DinoRunz.GameConfig.max_speed : inSpeed));
	
	var newFrame = Phaser.Math.mapLinear(this.speed, DinoRunz.GameConfig.min_speed, DinoRunz.GameConfig.max_speed, 20, 30);
	this.fArrow_run.speed = newFrame;
};

PlayerView.prototype.getSpeed = function() {
	return this.speed;
};

PlayerView.prototype.getIndex = function() {
	return this.currentIndex;
};

PlayerView.prototype.getView = function() {
	return this.fArrow;
};

PlayerView.prototype.applyCommand = function(inDirection, inIsJump) {
	if (inIsJump) {
		var jumpSoundId = this.game.rnd.integerInRange(1, 2);
		window.sounds.sound('sfx_jump_'+jumpSoundId).play();
		
		this.jumpState = 1;
		this.jumpRemainDistance = 90;
	}
	
	if(!inIsJump) window.sounds.sound('sfx_curve').play();
	this.setDirection(inDirection);
};


PlayerView.prototype.updateJump = function(inPositionOffset) {
	if (this.jumpState === 0) {
		return;
	}
	
	if (this.jumpState === 1) {
		if (this.jumpRemainDistance > 0) {
			this.jumpRemainDistance = (this.jumpRemainDistance < inPositionOffset ? 0 : this.jumpRemainDistance - inPositionOffset);
			var targetScale = this.game.math.mapLinear(this.jumpRemainDistance, 0, 80, PlayerView.JUMP_SCALE, 1);
			this.scale.set(targetScale);
		} else {
			this.jumpRemainDistance = 90;
			this.jumpState = 2;
			this.scale.set(PlayerView.JUMP_SCALE);
		}
	} else if (this.jumpState === 2) {
		if (this.jumpRemainDistance > 0) {
			this.jumpRemainDistance = (this.jumpRemainDistance < inPositionOffset ? 0 : this.jumpRemainDistance - inPositionOffset);
			var targetScale = this.game.math.mapLinear(this.jumpRemainDistance, 0, 80, 1, PlayerView.JUMP_SCALE);
			this.scale.set(targetScale);
		} else {
			this.jumpRemainDistance = 0;
			this.jumpState = 0;
			this.scale.set(1);
		}
	}
};

PlayerView.prototype.moveToTile = function(inTileView, inDuration) {
	var duration = inDuration || 0;
	
	if (duration === 0) {
		this.position.setTo(inTileView.x, inTileView.y);
		return;
	}
};

PlayerView.prototype.setDirection = function(inDirection) {
	
	this.direction = inDirection;
	
	switch (inDirection) {
	case EDirection.RIGHT:
		this.angle = 0;
		break;
	case EDirection.DOWN:
		this.angle = 90;
		break;
	case EDirection.LEFT:
		this.angle = 180;
		break;
	case EDirection.UP:
		this.angle = 270;
		break;
	default:
		this.angle = 0;
		this.direction = EDirection.RIGHT;
		break;
	}
};

PlayerView.prototype.changeCharacter = function(inId) {
	/**
	 * todo : 달팽이 캐릭터 해제
	 */
	var charId = inId;
	if (charId === undefined || charId === null) {
		charId = this.game.rnd.integerInRange(1, 10);
	}

	DinoRunz.Storage.UserData.lastCharacterId = charId;
	
	var textureKey = "auhaSheet" + charId;
	this.fArrow.loadTexture(textureKey, null, false);
	
	return charId;
};

PlayerView.prototype.reset = function() {
    this.fPlayerContainer.scale.set(1);
    this.fPlayerContainer.rotation = 0;
};

PlayerView.prototype.kill = function(inCallback, inContext) {
    this.killTween = this.game.add.tween(this.fPlayerContainer.scale).to({x: 0, y: 0}, 500, Phaser.Easing.Quartic.In, true);
    this.killTween.onUpdateCallback(function(inParam){
        this.fPlayerContainer.rotation += 0.2;
    }, this);
    this.killTween.onComplete.addOnce(function() {
        this.fPlayerContainer.scale.set(0);
        
        this.killTimer = this.game.time.events.add(10, function() {
            if (inCallback) {
                inCallback.call(inContext);
            }
            this.game.time.events.remove(this.killTimer);
        }, this);
        this.game.tweens.remove(this.killTween);
    }, this);
    
};

PlayerView.prototype.showGetCrownEffect = function(crownNum) {
	if(crownNum===0) return;
	var crownKey = (crownNum===2) ? "getGoldCrown":"getSilverCrown";
	this.fGetCrown.loadTexture(crownKey, null, false);
	this.fGetCrown.visible = true;
	this.fGetCrown.animations.play("getCrown", 10, false);
}