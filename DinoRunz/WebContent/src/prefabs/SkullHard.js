
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * SkullHard.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function SkullHard(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _sprSkull = this.game.add.sprite(0, 0, 'resAtlas', 'skull.png', this);
	_sprSkull.anchor.setTo(0.5, 0.5);
	
	
	
	// public fields
	
	this.fSprSkull = _sprSkull;
	
}

/** @type Phaser.Group */
var SkullHard_proto = Object.create(Phaser.Group.prototype);
SkullHard.prototype = SkullHard_proto;
SkullHard.prototype.constructor = SkullHard;

/* --- end generated code --- */
// -- user code here --
SkullHard.prototype.play = function (delay, inPosition) {
	if(inPosition) {
		this.position.setTo(inPosition.x, inPosition.y);
	}

	this.scale.setTo(1);
	this.fScaleTween = this.game.add.tween(this.scale).to({x: 2, y: 2}, 1500, Phaser.Easing.Linear.None, true, delay, 100, true);
	this.fScaleTween.onComplete.addOnce(function() {
		this.game.tweens.remove(this.fScaleTween);
	}, this);

	this.alpha = 0;
	this.fAlphaTween = this.game.add.tween(this).to({alpha: 1}, 700, Phaser.Easing.Linear.None, true, delay, 100, true);
	this.fAlphaTween.onComplete.addOnce(function () {
		this.visible = false;
		this.game.tweens.remove(this.fAlphaTween);
	}, this);

	this.angle = 0;
	var dir = (this.game.rnd.integerInRange(0, 1) === 1) ? 1 : -1;
	this.fRotateTween = this.game.add.tween(this).to({angle: 360 * dir}, 3000, Phaser.Easing.Linear.None, true, delay, 100);
	this.fRotateTween.onComplete.addOnce(function () {
		this.game.tweens.remove(this.fRotateTween);
	}, this);

	this.visible = true;
};

SkullHard.prototype.deleteTweens = function () {
	this.game.tweens.remove(this.fScaleTween);
	this.game.tweens.remove(this.fAlphaTween);
	this.game.tweens.remove(this.fRotateTween);
}