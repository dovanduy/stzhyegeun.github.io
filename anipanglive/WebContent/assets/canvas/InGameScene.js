// Generated by Phaser Editor v1.2.1

/**
 * InGameScene.
 * @param {Phaser.Game} aGame The game.
 * @param {Phaser.Group} aParent The parent group. If not given the game world will be used instead.
 */
function InGameScene(aGame, aParent) {
	Phaser.Group.call(this, aGame, aParent);

	/* --- pre-init-begin --- */

	// you can insert code here

	/* --- pre-init-end --- */

	this.game.add.sprite(0, 0, 'bgIngame', null, this);

	var topUIContainer = this.game.add.group(this);
	topUIContainer.position.setTo(0, 70);

	var gameBoard = this.game.add.group(this);
	gameBoard.position.setTo(0, 300);

	var opponentContainer = this.game.add.group(this);

	 // public fields

	this.fTopUIContainer = topUIContainer;
	this.fGameBoard = gameBoard;
	this.fOpponentContainer = opponentContainer;

	/* --- post-init-begin --- */

	// you can insert code here
	// make board

	// set masking
	var boardMask = this.game.add.graphics(this.fGameBoard.x, this.fGameBoard.y);
	boardMask.beginFill(0xffffff);
	boardMask.drawRect(0, 0, 480, 480);
	this.fGameBoard.mask = boardMask;
	
	
	

	/* --- post-init-end --- */
}

/** @type Phaser.Group */
var InGameScene_proto = Object.create(Phaser.Group.prototype);
InGameScene.prototype = InGameScene_proto;
InGameScene.prototype.constructor = Phaser.Group;

/* --- end generated code --- */

// you can insert code here
InGameScene.getBoardCellPosition = function(inIndex) {
	var leftBoardMargin = (StzGameConfig.GAME_WIDTH - (InGameBoardConfig.BLOCK_WIDTH * InGameBoardConfig.COL_COUNT)) / 2;
	StzCommon.StzLog.print("[InGameScene] leftBoardMargin = " + leftBoardMargin);
	// check parameter validation
	if (inIndex < 0 || inIndex >= InGameBoardConfig.COL_COUNT * InGameBoardConfig.ROW_COUNT) {
		return null;
	}
	
	var indexX = Math.floor(inIndex / InGameBoardConfig.COL_COUNT);
	var indexY = Math.floor(inIndex % InGameBoardConfig.COL_COUNT);
		
	
	var resultX = leftBoardMargin + (InGameBoardConfig.BLOCK_WIDTH / 2) + (indexX * InGameBoardConfig.BLOCK_WIDTH);
	var resultY = (InGameBoardConfig.BLOCK_HEIGHT / 2) + (indexY * InGameBoardConfig.BLOCK_HEIGHT);
	
	return {x: resultX, y: resultY};
};
