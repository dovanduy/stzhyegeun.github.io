// Generated by Phaser Editor v1.2.1

/**
 * InGameScene.
 * @param {Phaser.Game} aGame The game.
 * @param {Phaser.Group} aParent The parent group. If not given the game world will be used instead.
 */
function InGameScene(aGame, aParent) {
	Phaser.Group.call(this, aGame, aParent);

	/* --- pre-init-begin --- */

	// you can insert code here

	/* --- pre-init-end --- */

	this.game.add.sprite(0, 0, 'inGameBG', null, this);

	var topUIContainer = this.game.add.group(this);

	var timeGageBody = this.game.add.sprite(151, 1021, 'middle_bar', null, topUIContainer);

	this.game.add.sprite(136, 1021, 'timer_start', null, topUIContainer);

	var timerEnd = this.game.add.sprite(668, 1021, 'timer_end', null, topUIContainer);

	var warning = this.game.add.sprite(0, 0, 'warning', null, this);

	var feverAnimContainer = this.game.add.group(this);
	feverAnimContainer.position.setTo(0, 120);

	var gameBoard = this.game.add.group(this);
	gameBoard.position.setTo(0, 260);

	var bottomUIContainer = this.game.add.group(this);

	var bombGauge = this.game.add.sprite(360, 1170, 'bombGauge', 0, bottomUIContainer);
	bombGauge.anchor.setTo(0.5, 0.5);

	var rivalContainer = this.game.add.group(this);
	rivalContainer.position.setTo(290, 0);

	this.game.add.sprite(0, 0, 'playerInfoUI', 'rival_bg.png', rivalContainer);

	var thumbRival = this.game.add.sprite(193, 73, 'playerInfoUI', 'rival_thumb.png', rivalContainer);
	thumbRival.anchor.setTo(0.5, 0.5);

	this.game.add.sprite(146, 25, 'playerInfoUI', 'rivalThumbLine.png', rivalContainer);

	var rivalFaceWin = this.game.add.sprite(70, 3, 'playerInfoUI', 'face_rival_win.png', rivalContainer);

	var rivalFaceLose = this.game.add.sprite(70, -3, 'playerInfoUI', 'face_rival_lose.png', rivalContainer);

	var meContainer = this.game.add.group(this);
	meContainer.position.setTo(-340, 0);

	this.game.add.sprite(0, 0, 'playerInfoUI', 'player_bg.png', meContainer);

	var thumbMe = this.game.add.sprite(538, 71, 'playerInfoUI', 'player_thumb.png', meContainer);
	thumbMe.anchor.setTo(0.5, 0.5);

	this.game.add.sprite(488, 21, 'playerInfoUI', 'playerThumbLine.png', meContainer);

	var meFaceLose = this.game.add.sprite(510, -2, 'playerInfoUI', 'face_player_lose.png', meContainer);

	var meFaceWin = this.game.add.sprite(585, 0, 'playerInfoUI', 'face_player_win.png', meContainer);

	var txtStateImage = this.game.add.group(this);
	txtStateImage.position.setTo(370, 550);

	 // public fields

	this.fTopUIContainer = topUIContainer;
	this.fTimeGageBody = timeGageBody;
	this.fTimerEnd = timerEnd;
	this.fWarning = warning;
	this.fFeverAnimContainer = feverAnimContainer;
	this.fGameBoard = gameBoard;
	this.fBombGauge = bombGauge;
	this.fRivalContainer = rivalContainer;
	this.fThumbRival = thumbRival;
	this.fRivalFaceWin = rivalFaceWin;
	this.fRivalFaceLose = rivalFaceLose;
	this.fMeContainer = meContainer;
	this.fThumbMe = thumbMe;
	this.fMeFaceLose = meFaceLose;
	this.fMeFaceWin = meFaceWin;
	this.fTxtStateImage = txtStateImage;

	/* --- post-init-begin --- */
	
	var meNameStyle = {fontSize: '35px', font: 'hs_bubbleregular', fill: '#8b4b00', boundsAlignH: 'right', boundsAlignV: 'top'};
	var meScoreStyle = {fontSize: '38px', font: 'hs_bubbleregular', fill: '#bc6500', boundsAlignH: 'right', boundsAlignV: 'bottom'};
	var rivalNameStyle = {fontSize: '32px', font: 'hs_bubbleregular', fill: '#532170', boundsAlignH: 'left', boundsAlignV: 'top'};
	var rivalScoreStyle = {fontSize: '31px', font: 'hs_bubbleregular', fill: '#6c2d90', boundsAlignH: 'left', boundsAlignV: 'bottom'};

	var meTextYOffset = this.fThumbMe.y - 36.5;
	this.fMeName = this.game.add.text(0, 0, window.MeInfo.name, meNameStyle);
	this.fMeContainer.add(this.fMeName);
	this.fMeName.setTextBounds(10, meTextYOffset, 465, 85);
	this.fMeScore = this.game.add.text(0, 0, '0', meScoreStyle);
	this.fMeContainer.add(this.fMeScore);
	this.fMeScore.setTextBounds(10, meTextYOffset, 465, 85);
	
	var rivalTextYOffset = this.fThumbRival.y - 33.5;
	this.fRivalName = this.game.add.text(0, 0, window.RivalInfo.name, rivalNameStyle);
	this.fRivalContainer.add(this.fRivalName);
	this.fRivalName.setTextBounds(245, rivalTextYOffset, 465, 75);
	this.fRivalScore = this.game.add.text(0, 0, '0', rivalScoreStyle);
	this.fRivalContainer.add(this.fRivalScore);
	this.fRivalScore.setTextBounds(245, rivalTextYOffset, 465, 75);
	
	// set board masking
	var boardMask = this.game.add.graphics(this.fGameBoard.x, this.fGameBoard.y);
	boardMask.beginFill(0xffffff);
	boardMask.drawRect(0, 0, 720, 754);
	this.fGameBoard.mask = boardMask;
	
	// thumbnail setting - 'meProfileImage'
	if (this.game.cache.checkImageKey('meProfileImage') === true) {
		var meProfileImage = this.game.add.image(0, 0, 'meProfileImage');
		this.fThumbMe.addChild(meProfileImage);

		var ratio = (this.fThumbMe.width - 5) / meProfileImage.width;
		meProfileImage.scale.setTo(ratio, ratio);
		meProfileImage.anchor.setTo(0.5, 0.5);
		
	}

	// thumbnail setting - 'rivalProfileImage'
	if (this.game.cache.checkImageKey('rivalProfileImage') === true) {
		var rivalProfileImage = this.game.add.image(0,0, 'rivalProfileImage');
		this.fThumbRival.addChild(rivalProfileImage);
		
		ratio = (this.fThumbRival.width - 5) / rivalProfileImage.width;
		rivalProfileImage.scale.setTo(ratio, ratio);
		rivalProfileImage.anchor.setTo(0.5, 0.5);
	}
	/* --- post-init-end --- */
}

/** @type Phaser.Group */
var InGameScene_proto = Object.create(Phaser.Group.prototype);
InGameScene.prototype = InGameScene_proto;
InGameScene.prototype.constructor = Phaser.Group;

/* --- end generated code --- */

// you can insert code here
InGameScene.getBoardCellPosition = function(inIndex) {
	var leftBoardMargin = (StzGameConfig.GAME_WIDTH - (InGameBoardConfig.BLOCK_WIDTH * InGameBoardConfig.COL_COUNT)) / 2;
	//StzCommon.StzLog.print("[InGameScene] leftBoardMargin = " + leftBoardMargin);
	// check parameter validation
	if (inIndex < 0 || inIndex >= InGameBoardConfig.COL_COUNT * InGameBoardConfig.ROW_COUNT) {
		return null;
	}
	
	var indexX = Math.floor(inIndex % InGameBoardConfig.COL_COUNT);
	var indexY = Math.floor(inIndex / InGameBoardConfig.COL_COUNT);
		
	
	var resultX = leftBoardMargin + (InGameBoardConfig.BLOCK_WIDTH / 2) + (indexX * InGameBoardConfig.BLOCK_WIDTH);
	var resultY = ((InGameBoardConfig.BLOCK_HEIGHT) + indexY * (InGameBoardConfig.BLOCK_HEIGHT + InGameBoardConfig.BLOCK_Y_OFFSET));
	
	return {x: resultX, y: resultY};
};
