
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * Level.
 */
function Level() {
	
	Phaser.State.call(this);
	
	
	
}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function () {
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.stage.backgroundColor = '#ffffff';
	
};

Level.prototype.preload = function () {
};

Level.prototype.create = function () {
	var _bgContainer = this.add.group();
	
	var _starfield5 = this.add.sprite(0, 0, 'starfield', null, _bgContainer);
	_starfield5.scale.setTo(2.5, 2.5);
	
	var _starfield4 = this.add.sprite(1280, 0, 'starfield', null, _bgContainer);
	_starfield4.scale.setTo(2.5, 2.5);
	
	var _starfield3 = this.add.sprite(2560, 3, 'starfield', null, _bgContainer);
	_starfield3.scale.setTo(2.5, 2.5);
	
	var _starfield2 = this.add.sprite(0, 1280, 'starfield', null, _bgContainer);
	_starfield2.scale.setTo(2.5, 2.5);
	
	var _starfield1 = this.add.sprite(1280, 1280, 'starfield', null, _bgContainer);
	_starfield1.scale.setTo(2.5, 2.5);
	
	var _starfield = this.add.sprite(2560, 1280, 'starfield', null, _bgContainer);
	_starfield.scale.setTo(2.5, 2.5);
	
	var _gameContainer = this.add.group();
	
	
	
	// public fields
	
	this.fGameContainer = _gameContainer;
	
	/* --- post-init-begin --- */
	this.game.world.setBounds(0, 0, 3840, 2160);
    this.cameraSize = new Phaser.Rectangle();
    this.cameraSize.setTo(0, 0, 3840, 2160);
    
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    
    this.game.input.onDown.add(this.clickMouse, this);
    
    this.enemyList = [];
    
    this.redShip = new SpaceShip(this.game, this.fGameContainer);
    this.redShip.initShip(EShipColor.RED, EShipSize.BIG);
    this.redShip.setPosition(this.game.world.width / 5 * 4, this.game.world.height / 5 * 4);
    this.game.add.existing(this.redShip);
    this.enemyList.push(this.redShip);
    
    this.blueShip = new SpaceShip(this.game, this.fGameContainer);
    this.blueShip.initShip(EShipColor.BLUE, EShipSize.SMALL);
    this.blueShip.setPosition(this.game.world.width / 5, this.game.world.height / 5);
    this.game.add.existing(this.blueShip);
    this.blueShip.addEnemy(this.redShip);

    this.redShip.addEnemy(this.blueShip);
    this.redShip.setFollowTarget(this.blueShip);
    
    this.zoomTo(0.35, true);
    
    //create a new bitmap data object
    var bmd = this.game.add.bitmapData(1,1);
    // draw to the canvas context like normal
    bmd.ctx.beginPath();
    bmd.ctx.rect(0,0,1,1);
    bmd.ctx.fillStyle = '#ff0000';
    bmd.ctx.fill();

    // use the bitmap data as the texture for the sprite
    this.cameraTarget = this.game.add.sprite(0, 0, bmd);
    //this.cameraTarget.alpha = 0;
    
    this.game.camera.follow(this.cameraTarget);
    
    this.blueShip.getView().bringToTop();
    // set collistion group
    {
		this.shipCollisionGroup = this.game.physics.p2.createCollisionGroup();
		this.bulletCollisionGroup = this.game.physics.p2.createCollisionGroup();
		
		//this.blueShip.getView().body.setCollisionGroup(this.shipCollisionGroup);
		//this.blueShip.getView().body.collides([this.bulletCollistionGroup]);
		//this.redShip.getView().body.setCollisionGroup(this.shipCollisionGroup);
		//this.redShip.getView().body.collides([this.bulletCollistionGroup]);
    }
    
	/* --- post-init-end --- */
};

/* --- end generated code --- */
// -- user code here --

Level.prototype.render = function() {
//    this.game.debug.cameraInfo(this.game.camera, 32, 32);
//    this.game.debug.spriteInfo(this.blueShip.getView(), 500, 32);
//    this.game.debug.spriteInfo(this.redShip.getView(), 500, 150);
	this.blueShip.render();
	//this.redShip.render();
};

Level.prototype.update = function() {
    this.blueShip.update();
    this.redShip.update();
    // CameraFollow
    this.cameraUpdate([this.blueShip, this.redShip]);
    //this.game.camera.setPosition(this.blueShip.getView().body.x - this.camera.width / 2, this.blueShip.getView().body.y - this.camera.height / 2);
};


Level.prototype.cameraUpdate = function(inRenderTargetList) {
	
	var minX = this.game.world.width;
	var maxX = 0;
	var minY = this.game.world.height;
	var maxY = 0;
	
	for (var i = 0; i < inRenderTargetList.length; i++) {
		if (inRenderTargetList[i].getView().body.x < minX) {
			minX = inRenderTargetList[i].getView().body.x;
		}
		if (inRenderTargetList[i].getView().body.x > maxX) {
			maxX = inRenderTargetList[i].getView().body.x;
		}
		if (inRenderTargetList[i].getView().body.y < minY) {
			minY = inRenderTargetList[i].getView().body.y;
		}
		if (inRenderTargetList[i].getView().body.y > maxY) {
			maxY = inRenderTargetList[i].getView().body.y;
		}
	}
	
	var maxDistance = 0;
	var cameraZoomRatio = 1;
	if (maxX - minX > maxY - minY) {
		maxDistance = maxX - minX;
		cameraZoomRatio = 960 / (maxDistance + 1000);
	} else {
		maxDistance = maxY - minY;
		cameraZoomRatio = 540 / (maxDistance + 800);
	}
//	console.log(StzUtil.strFormat("[CameraUpdate] maxDistance: {0}", maxDistance));
	
	if (cameraZoomRatio > 1) {
		cameraZoomRatio = 1;
	} 
	
	if (cameraZoomRatio < 0.35) {
		cameraZoomRatio = 0.35;
	}
	
	this.zoomTo(cameraZoomRatio);
//	console.log(StzUtil.strFormat("[CameraUpdate] zoomTo: {0}", cameraZoomRatio));
	
	
	var betweenLine = new Phaser.Line(inRenderTargetList[0].getView().body.x, inRenderTargetList[0].getView().body.y, inRenderTargetList[1].getView().body.x, inRenderTargetList[1].getView().body.y);
	var mid = new Phaser.Point();
	betweenLine.midPoint(mid);
	this.cameraTarget.position.setTo(mid.x, mid.y);
};

Level.prototype.zoomTo = function(inScale, inIsAtOnce) {
    
	var ZOOM_OFFSET = 0.001;
	var isAtOnce = inIsAtOnce || false;
	
	if (isAtOnce) {
		this.game.camera.scale.x = inScale;
		this.game.camera.scale.y = inScale;
		return;
	}
	
	if (Math.abs(this.game.camera.scale.x - inScale) > ZOOM_OFFSET) {
		this.game.camera.scale.x = (this.game.camera.scale.x > inScale ? this.game.camera.scale.x - ZOOM_OFFSET : this.game.camera.scale.x + ZOOM_OFFSET);	
	} 
		
	if (Math.abs(this.game.camera.scale.y - inScale) > ZOOM_OFFSET) {
		this.game.camera.scale.y = (this.game.camera.scale.y > inScale ? this.game.camera.scale.y - ZOOM_OFFSET : this.game.camera.scale.y + ZOOM_OFFSET);
	}
};

Level.prototype.clickMouse = function(inPointer) {
	
	var newPointer = {
		x: (inPointer.x + this.game.camera.x) / this.game.camera.scale.x, 
		y: (inPointer.y + this.game.camera.y) / this.game.camera.scale.y
	};
	
	if (this.blueShip) {
		this.blueShip.setDestinationPoint(newPointer);
	}
};