// Generated by Phaser Editor v1.4.0 (Phaser v2.6.2)


/**
 * LobbyScene.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function LobbyScene(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	this.game.add.sprite(0, 0, 'common_bg', null, this);
	
	this.game.add.sprite(0, 190, 'lobbyUI', 'bg.png', this);
	
	this.game.add.sprite(260, 1223, 'lobbyUI', 'ci.png', this);
	
	var _rivalProfileContainer = this.game.add.group(this);
	_rivalProfileContainer.position.setTo(445, 387);
	
	var _meProfileContainer = this.game.add.group(this);
	_meProfileContainer.position.setTo(104, 384);
	
	var _meBadge = this.game.add.sprite(89, 584, 'badge', 0, this);
	_meBadge.scale.setTo(0.7, 0.7);
	
	var _meBadgeStar = this.game.add.sprite(89, 585, 'badgeStar', 0, this);
	_meBadgeStar.scale.setTo(0.7, 0.7);
	
	var _rivalBadge = this.game.add.sprite(432, 584, 'badge', 0, this);
	_rivalBadge.scale.setTo(0.7, 0.7);
	
	var _rivalBadgeStar = this.game.add.sprite(432, 585, 'badgeStar', 0, this);
	_rivalBadgeStar.scale.setTo(0.7, 0.7);
	
	var _animLoading = this.game.add.sprite(288, 738, 'animLoading', 0, this);
	
	var _txtFriendMatch = this.game.add.sprite(214, 689, 'lobbyUI', 'match.png', this);
	
	var _btnSkip = this.game.add.sprite(455, 761, 'lobbyUI', 'skip_btn.png', this);
	
	var _btnWait = this.game.add.sprite(39, 761, 'lobbyUI', 'wait_btn.png', this);
	
	var _txtMatchedState = this.game.add.sprite(97, 273, 'lobbyUI', 'waiting.png', this);
	
	// public fields
	
	this.fRivalProfileContainer = _rivalProfileContainer;
	this.fMeProfileContainer = _meProfileContainer;
	this.fMeBadge = _meBadge;
	this.fMeBadgeStar = _meBadgeStar;
	this.fRivalBadge = _rivalBadge;
	this.fRivalBadgeStar = _rivalBadgeStar;
	this.fAnimLoading = _animLoading;
	this.fTxtFriendMatch = _txtFriendMatch;
	this.fBtnSkip = _btnSkip;
	this.fBtnWait = _btnWait;
	this.fTxtMatchedState = _txtMatchedState;
	/* --- post-init-begin --- */

	// input enabled
	//this.fCommon_vs.inputEnabled = true;
	
	
	// set meProfileImage
	this.fMeProfileMaskImage = this.game.add.sprite(0, 0, 'lobbyUI', 'thumb_mask.png');
	this.fMeProfileMaskImage.visible = false;

	this.fTxtFriendMatch.visible = false;
	
	if (this.game.cache.checkImageKey('meProfileImage') === true) {
		var meImage = this.game.add.image(0, 0, 'meProfileImage');
		var ratio = this.fMeProfileMaskImage.width / meImage.width;
		meImage.scale.setTo(ratio, ratio);
		
		var meProfileBMD = this.game.make.bitmapData(this.fMeProfileMaskImage.width, this.fMeProfileMaskImage.height);
		meProfileBMD.alphaMask(meImage, this.fMeProfileMaskImage);
		this.meProfileImage = this.game.add.image(0, 0, meProfileBMD);
		this.fMeProfileContainer.add(this.meProfileImage);
		
		meImage.kill();
	}
	
	this.fRivalProfileMaskImage = this.game.add.sprite(0, 0, 'lobbyUI', 'thumb_mask.png');
	this.fRivalProfileMaskImage.visible = false;
	this.rollingCount = 0;
	this.rivalProfileArray = [];
	
	for(var i =0; i<StzGameConfig.MAX_PROFILE_COUNT;i++){
		var rivalImage = this.game.add.sprite(0, 0, 'ProfileRolling', i); 
		
		var ratio = this.fMeProfileMaskImage.width / rivalImage.width;
		rivalImage.scale.setTo(ratio, ratio);
		
		var rivalProfileBMD = this.game.make.bitmapData(this.fRivalProfileMaskImage.width, this.fRivalProfileMaskImage.height);
		rivalProfileBMD.alphaMask(rivalImage, this.fRivalProfileMaskImage);
		this.rivalProfileArray.push(this.game.add.image(0, 0, rivalProfileBMD));
		this.fRivalProfileContainer.add(this.rivalProfileArray[i]);
		this.rivalProfileArray[i].visible = false;
		rivalImage.kill();
	}
	
	this.txtMatchCount = this.game.add.bitmapText(325, 805, 'matchCount', StzGameConfig.MAX_LOBBY_WATING_COUNT, 45);
	this.txtMatchCount.anchor.set(0.5, 1);
	
	// set names
	var nameFontStyle = {fontSize: '30px', fill: '#ffffff', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'top'};
	this.fMeName = this.game.add.text(0, 0, window.MeInfo.name, nameFontStyle);
	this.fMeName.setTextBounds(105, 560, 160, 50);
	
	this.fRivalName = this.game.add.text(0, 0, 'rival', nameFontStyle);
	this.fRivalName.setTextBounds(447, 560, 160, 50);

	var txtMeBadgeScore = this.game.add.text(0, 0, window.MeInfo.badge.getBadgeData().badgeScore, {fontSize: '32px', fill: '#e2fbff', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'middle'});
	txtMeBadgeScore.stroke = '#eb2fbff';
	txtMeBadgeScore.strokeThickness = 2;

	txtMeBadgeScore.setTextBounds(this.fMeBadge.x + 40, this.fMeBadge.y + 7, this.fMeBadge.width*2, this.fMeBadge.height);
	
	
	this.txtRivalBadgeScore = this.game.add.text(0, 0, '0', {fontSize: '32px', fill: '#e2fbff', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'middle'});
	this.txtRivalBadgeScore.stroke = '#eb2fbff';
	this.txtRivalBadgeScore.strokeThickness = 2;

	this.txtRivalBadgeScore.setTextBounds(this.fRivalBadge.x + 40, this.fRivalBadge.y + 7, this.fRivalBadge.width*2, this.fRivalBadge.height);
	this.initBadge();
	
	var btnFontStyle = {fontSize: '30px', fill: '#ffffff', boundsAlignH: 'center', boundsAlignV: 'middle'};
	var txtWait = this.game.add.text(0, 0, 'KEEP WAIT', btnFontStyle);
	txtWait.setTextBounds(0, 0, this.fBtnWait.width, this.fBtnWait.height);
	this.fBtnWait.addChild(txtWait);
	
	var txtSkip = this.game.add.text(0, 0, 'SKIP', btnFontStyle);
	txtSkip.setTextBounds(0, 0, this.fBtnSkip.width, this.fBtnSkip.height);
	this.fBtnSkip.addChild(txtSkip);
	
	this.fAnimLoading.visible = false;
	this.fAnimLoading.animations.add('Loading', [0,1,2,3], 5, true);
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var LobbyScene_proto = Object.create(Phaser.Group.prototype);
LobbyScene.prototype = LobbyScene_proto;
LobbyScene.prototype.constructor = LobbyScene;

/* --- end generated code --- */

// you can insert code here
LobbyScene.prototype.startRollingProfile = function() {
	this.rollingAnim = this.game.time.events.loop(100, function(){
		for(var i =0; i<StzGameConfig.MAX_PROFILE_COUNT;i++){
			this.rivalProfileArray[i].visible = false;
		}
		
		this.rivalProfileArray[this.rollingCount].visible = true;
		this.fRivalName.text = StzGameConfig.PROFILE_NAME_TABLE[this.rollingCount++];
	
		var aiBadgeCount = StzUtil.createRandomInteger(0, EBadgeScoreConfig.BADGE_MAX_SCORE);

		var badgeGradeNum = 0;
		for(var i =1; i < EBadgeGradePoint.length; i++){
			if(EBadgeGradePoint[i-1] <= aiBadgeCount && aiBadgeCount < EBadgeGradePoint[i]){
				badgeGradeNum = i-1;
				break;
			}
		}

		this.txtRivalBadgeScore.text = aiBadgeCount;
		
		this.fRivalBadge.frame =Math.floor(badgeGradeNum/5);
		this.fRivalBadgeStar.frame = Math.floor(badgeGradeNum%5);
		
		if(this.rollingCount >= StzGameConfig.MAX_PROFILE_COUNT){
			this.rollingCount = 0;
		}
	}.bind(this));
};

LobbyScene.prototype.stopRollingProfile = function() {
	for(var i =0; i<StzGameConfig.MAX_PROFILE_COUNT;i++){
		this.rivalProfileArray[i].visible = false;
	}
	
	this.game.time.events.remove(this.rollingAnim);
	
	StzSoundList[ESoundName.SE_MATCHING_RATTLE].stop();
	StzSoundList[ESoundName.SE_MATCHING_COMPLETE].play();
};

/**
 * ?��?���????????? ?��보�?? 로비 ?��면에 출력
 */
LobbyScene.prototype.setRivalInfo = function() {
    this.fRivalName.text = window.RivalInfo.name;

	this.fRivalProfileMaskImage = this.game.add.sprite(0, 0, 'lobbyUI', 'thumb_mask.png');
	this.fRivalProfileMaskImage.visible = false;
	
	this.fRivalBadge.frame = window.RivalInfo.badge.getBadgeData().grade;
	this.fRivalBadgeStar.frame = window.RivalInfo.badge.getBadgeData().starCount;
	this.txtRivalBadgeScore.text = window.RivalInfo.badge.getBadgeData().badgeScore;

	if (this.game.cache.checkImageKey('rivalProfileImage') === true) {
		var rivalImage = this.game.add.image(0, 0, 'rivalProfileImage');
		var ratio = this.fRivalProfileMaskImage.width / rivalImage.width;
		rivalImage.scale.setTo(ratio, ratio);
		
		var rivalProfileBMD = this.game.make.bitmapData(this.fRivalProfileMaskImage.width, this.fRivalProfileMaskImage.height);
		rivalProfileBMD.alphaMask(rivalImage, this.fRivalProfileMaskImage);
		this.rivalProfileImage = this.game.add.image(0, 0, rivalProfileBMD);
		this.fRivalProfileContainer.add(this.rivalProfileImage);
		
		rivalImage.kill();
	}
};

LobbyScene.prototype.initBadge = function() {
	this.fMeBadge.frame = window.MeInfo.badge.getBadgeData().grade;
	this.fMeBadgeStar.frame = window.MeInfo.badge.getBadgeData().starCount;
};

LobbyScene.prototype.superDestroy = LobbyScene.prototype.destroy;
LobbyScene.prototype.destroy = function(destroyChildren, soft) {
	
	this.meProfileImage.destroy();
	this.txtMatchCount.kill();
	this.txtRivalBadgeScore.kill();
	
	this.fRivalBadge.kill();
	this.fRivalBadgeStar.kill();
	
	this.fMeBadge.kill();
	this.fMeBadgeStar.kill();
	this.fAnimLoading.kill();
	
	this.fRivalProfileContainer.destroy();
	this.game.time.events.remove(this.rollingAnim);
	
	this.superDestroy(destroyChildren, soft);
};
