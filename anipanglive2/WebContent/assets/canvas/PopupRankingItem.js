// Generated by Phaser Editor v1.4.0 (Phaser v2.6.2)


/**
 * PopupRankingItem.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function PopupRankingItem(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _rankingItem = this.game.add.group(this);
	
	var _profileImage = this.game.add.group(_rankingItem);
	_profileImage.position.setTo(150, 5);
	
	var _ProfileRolling = this.game.add.sprite(0, 0, 'ProfileRolling', 0, _profileImage);
	
	var _badge = this.game.add.sprite(355, 90, 'badge', 0, _rankingItem);
	_badge.scale.setTo(0.7, 0.7);
	
	var _badgeStar = this.game.add.sprite(355, 90, 'badgeStar', 0, _rankingItem);
	_badgeStar.scale.setTo(0.7, 0.7);
	
	var _txtTrophy = this.game.add.group(_rankingItem);
	_txtTrophy.position.setTo(425, 90);
	
	var _txtName = this.game.add.group(_rankingItem);
	_txtName.position.setTo(355, 25);
	
	// public fields
	
	this.fRankingItem = _rankingItem;
	this.fProfileImage = _profileImage;
	this.fProfileRolling = _ProfileRolling;
	this.fBadge = _badge;
	this.fBadgeStar = _badgeStar;
	/* --- post-init-begin --- */
	
	// you can insert code here
	var nameFontStyle = {fontSize: '48px', fill: '#000000', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'middle'};
	this.fTxtName = this.game.add.text(0, 0, 'Name', nameFontStyle);
	this.fRankingItem.add(this.fTxtName);
	this.fTxtName.setTextBounds(_txtName.position.x, _txtName.position.y, 300, 50);
	
	this.fTxtTrophy = this.game.add.text(0, 0, 'Trophy', nameFontStyle);
	this.fRankingItem.add(this.fTxtTrophy);
	this.fTxtTrophy.setTextBounds(_txtTrophy.position.x, _txtTrophy.position.y, 100, 50);
	
	this.fTxtRanking = this.game.add.text(0, 0, '1', nameFontStyle);
	this.fRankingItem.add(this.fTxtRanking);
	this.fTxtRanking.setTextBounds(35, 40, 50, 50);
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var PopupRankingItem_proto = Object.create(Phaser.Group.prototype);
PopupRankingItem.prototype = PopupRankingItem_proto;
PopupRankingItem.prototype.constructor = PopupRankingItem;

/* --- end generated code --- */
// -- user code here --
PopupRankingItem.prototype.setData = function(inRanking, inData) {
	
	// check Data 
	if (inData.hasOwnProperty("platform_id") == false) {
		return false;
	}
	if (inData.hasOwnProperty("name") == false) {
		return false;
	}
	if (inData.hasOwnProperty("thumbnail") == false) {
		return false;
	}
	if (inData.hasOwnProperty("trophy") == false) {
		return false;
	}
	
	this.game.load.crossOrigin = 'Anonymous';
	if (inData.thumbnail.indexOf("http") >= 0) {
		this.game.load.image('thumb' + inData.platform_id, inData.thumbnail);
		this.game.load.onLoadComplete.add(function() {
			if (this.game.cache.checkImageKey('thumb' + inData.platform_id)) {
				var thumbImage = this.game.add.image(0, 0, 'thumb' + inData.platform_id);
				var ratio = this.fProfileRolling.width / thumbImage.width;
				thumbImage.scale.setTo(ratio, ratio);
				this.fProfileImage.add(thumbImage);
			}
		}, this);
		this.game.load.start();
	}
	
	this.fTxtName.text = inData.name;
	this.badgeObject = new Badge(this.game, inData.trophy);
	this.fBadge.frame = this.badgeObject.getBadgeData().grade;
	this.fBadgeStar.frame = this.badgeObject.getBadgeData().starCount;
	this.fTxtTrophy.text = this.badgeObject.getBadgeData().badgeScore;
	this.fTxtRanking.text = inRanking;
};
