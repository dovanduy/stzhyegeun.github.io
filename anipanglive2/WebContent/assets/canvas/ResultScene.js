// Generated by Phaser Editor v1.4.0 (Phaser v2.6.2)


/**
 * ResultScene.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function ResultScene(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	this.game.add.sprite(0, 0, 'common_bg', null, this);
	
	this.game.add.sprite(0, 0, 'resultUI', 'result_bg.jpg', this);
	
	var _btnGroup = this.game.add.group(this);
	
	var _btnEmoticon = this.game.add.sprite(66, 1072, 'resultUI', 'btn_emoji.png', _btnGroup);
	
	var _btnNewGame = this.game.add.sprite(290, 1072, 'resultUI', 'btn_rematch.png', _btnGroup);
	
	var _btnShare = this.game.add.sprite(508, 1072, 'resultUI', 'btn_share.png', _btnGroup);
	
	var _btnEmofiInfo = this.game.add.sprite(74, 1207, 'resultUI', 'btn_info_bg.png', _btnGroup);
	
	var _btnNewGameInfo = this.game.add.sprite(297, 1207, 'resultUI', 'btn_info_bg.png', _btnGroup);
	
	var _btnShareInfo = this.game.add.sprite(515, 1207, 'resultUI', 'btn_info_bg.png', _btnGroup);
	
	var _winParticlesContainer = this.game.add.group(this);
	_winParticlesContainer.position.setTo(215, 330);
	
	var _animWinBg = this.game.add.sprite(211, 341, 'resultUI', 'win_bg.png', this);
	_animWinBg.anchor.setTo(0.5, 0.5);
	
	this.game.add.sprite(101, 224, 'resultUI', 'win_thumb_bg.png', this);
	
	this.game.add.sprite(160, 750, 'resultUI', 'lose_thumb_bg.png', this);
	
	var _winnerProfileContainer = this.game.add.group(this);
	_winnerProfileContainer.position.setTo(117, 240);
	
	var _loserProfileContainer = this.game.add.group(this);
	_loserProfileContainer.position.setTo(164, 754);
	
	this.game.add.sprite(146, 693, 'resultUI', 'lose_thumb_cover.png', this);
	
	var _loseBadgeInfo = this.game.add.sprite(313, 804, 'resultUI', 'badge_bg.png', this);
	
	var _winBadgeInfo = this.game.add.sprite(338, 358, 'resultUI', 'badge_bg.png', this);
	
	var _badge = this.game.add.group(this);
	
	var _winBadge = this.game.add.sprite(325, 339, 'badge', 0, _badge);
	
	var _loseBadge = this.game.add.sprite(297, 794, 'badge', 0, _badge);
	_loseBadge.scale.setTo(0.9, 0.9);
	
	var _loseBadgeStar = this.game.add.sprite(299, 795, 'badgeStar', 0, _badge);
	_loseBadgeStar.scale.setTo(0.9, 0.9);
	
	var _winBadgeStar = this.game.add.sprite(326, 340, 'badgeStar', 0, _badge);
	
	var _emoticonGroup = this.game.add.group(this);
	
	this.game.add.sprite(72, 914, 'resultUI', 'emo_bg.png', _emoticonGroup);
	
	var _sadEmoticon = this.game.add.sprite(206, 935, 'emoticonAtlas', '02.png', _emoticonGroup);
	
	var _funEmoticon = this.game.add.sprite(315, 935, 'emoticonAtlas', '03.png', _emoticonGroup);
	
	var _regameEmoticon = this.game.add.sprite(424, 935, 'emoticonAtlas', '04.png', _emoticonGroup);
	
	var _provokeEmoticon = this.game.add.sprite(96, 935, 'emoticonAtlas', '01.png', _emoticonGroup);
	
	var _winEmoticonGroup = this.game.add.group(this);
	
	this.game.add.sprite(19, 232, 'resultUI', 'emoji_balloon.png', _winEmoticonGroup);
	
	var _winEmoticon = this.game.add.sprite(41, 244, 'emoticonAtlas', '01.png', _winEmoticonGroup);
	_winEmoticon.scale.setTo(0.85, 0.85);
	
	var _loseEmoticonGroup = this.game.add.group(this);
	
	this.game.add.sprite(40, 740, 'resultUI', 'emoji_balloon.png', _loseEmoticonGroup);
	
	var _loseEmoticon = this.game.add.sprite(62, 751, 'emoticonAtlas', '01.png', _loseEmoticonGroup);
	_loseEmoticon.scale.setTo(0.85, 0.85);
	
	var _upTitle = this.game.add.sprite(361, 115, 'resultUI', 'win_title.png', this);
	_upTitle.anchor.setTo(0.5, 0.0);
	
	var _downTitle = this.game.add.sprite(359, 611, 'resultUI', 'loser_title.png', this);
	_downTitle.anchor.setTo(0.5, 0.0);
	
	var _lvDownGroup = this.game.add.group(this);
	
	this.game.add.sprite(35, 13, 'popupLevelUI', 'lvdown_popup.png', _lvDownGroup);
	
	this.game.add.sprite(58, 31, 'popupLevelUI', 'lvdown_icon.png', _lvDownGroup);
	
	this.game.add.sprite(576, 30, 'popupLevelUI', 'lvdown_arrow.png', _lvDownGroup);
	
	var _btnHelp = this.game.add.sprite(621, 920, 'popupHelp', 'common_tutorial_btn.png', this);
	
	// public fields
	
	this.fBtnEmoticon = _btnEmoticon;
	this.fBtnNewGame = _btnNewGame;
	this.fBtnShare = _btnShare;
	this.fBtnEmofiInfo = _btnEmofiInfo;
	this.fBtnNewGameInfo = _btnNewGameInfo;
	this.fBtnShareInfo = _btnShareInfo;
	this.fWinParticlesContainer = _winParticlesContainer;
	this.fAnimWinBg = _animWinBg;
	this.fWinnerProfileContainer = _winnerProfileContainer;
	this.fLoserProfileContainer = _loserProfileContainer;
	this.fLoseBadgeInfo = _loseBadgeInfo;
	this.fWinBadgeInfo = _winBadgeInfo;
	this.fWinBadge = _winBadge;
	this.fLoseBadge = _loseBadge;
	this.fLoseBadgeStar = _loseBadgeStar;
	this.fWinBadgeStar = _winBadgeStar;
	this.fEmoticonGroup = _emoticonGroup;
	this.fSadEmoticon = _sadEmoticon;
	this.fFunEmoticon = _funEmoticon;
	this.fRegameEmoticon = _regameEmoticon;
	this.fProvokeEmoticon = _provokeEmoticon;
	this.fWinEmoticonGroup = _winEmoticonGroup;
	this.fWinEmoticon = _winEmoticon;
	this.fLoseEmoticonGroup = _loseEmoticonGroup;
	this.fLoseEmoticon = _loseEmoticon;
	this.fUpTitle = _upTitle;
	this.fDownTitle = _downTitle;
	this.fLvDownGroup = _lvDownGroup;
	this.fBtnHelp = _btnHelp;
	/* --- post-init-begin --- */

	// you can insert code here
	this.fLvDownGroup.visible = false;
	
	this.fWinEmoticonGroup.visible = false;
	this.fLoseEmoticonGroup.visible = false;
	this.fWinEmoticonGroup.alpha = 0;
	this.fLoseEmoticonGroup.alpha = 0;
	
	this.fEmoticonGroup.visible = false;
	this.fEmoticonGroup.alpha = 0;
	
	this.fBtnNewGame.inputEnabled = true;
	this.fBtnEmoticon.inputEnabled = true;
	this.fBtnShare.inputEnabled = true;
	
	var txtBtnEmoji = this.game.add.text(0, 0, 'EMOJI', {fontSize: '26px', fill: '#ffffff', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'middle'});
	var txtBtnLeave = this.game.add.text(0, 0, 'REFRESH', {fontSize: '26px', fill: '#ffffff', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'middle'});
	var txtBtnShare = this.game.add.text(0, 0, 'SHARE', {fontSize: '26px', fill: '#ffffff', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'middle'});
	
	this.fBtnEmofiInfo.addChild(txtBtnEmoji);
	txtBtnEmoji.setTextBounds(0, 5, this.fBtnEmofiInfo.width, this.fBtnEmofiInfo.height);
	this.fBtnNewGameInfo.addChild(txtBtnLeave);
	txtBtnLeave.setTextBounds(0, 5, this.fBtnNewGameInfo.width, this.fBtnNewGameInfo.height);
	this.fBtnShareInfo.addChild(txtBtnShare);
	txtBtnShare.setTextBounds(0, 5, this.fBtnShareInfo.width, this.fBtnShareInfo.height);
	
	this.fBtnEmofiInfo.visible = false;
	this.fBtnNewGameInfo.visible = false;
	this.fBtnShareInfo.visible = false;
	
	this.txtWinBadgeScore = this.game.add.text(0, 0, '4999', {fontSize: '32px', fill: '#e2fbff', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'middle'});
	this.txtWinBadgeScore.stroke = '#1b6670';
	this.txtWinBadgeScore.strokeThickness = 2;
	this.txtWinBadgeScoreChage = this.game.add.text(0, 0, '+ 50', {fontSize: '30px', fill: '#ffe400', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'middle'});
	
	this.txtLoseBadgeScore = this.game.add.text(0, 0, '4999', {fontSize: '26px', fill: '#e2fbff', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'middle'});
	this.txtLoseBadgeScore.stroke = '#1b6670';
	this.txtLoseBadgeScore.strokeThickness = 2;
	this.txtLoseBadgeScoreChage = this.game.add.text(0, 0, '- 50', {fontSize: '25px', fill: '#ff6000', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'middle'});

	this.fWinBadgeInfo.addChild(this.txtWinBadgeScore);
	
	this.fWinBadgeInfo.addChild(this.txtWinBadgeScoreChage);
	this.txtWinBadgeScore.setTextBounds(this.fWinBadge.width/1.2, 5, this.fWinBadgeInfo.width - this.fWinBadge.width, this.fWinBadgeInfo.height);
	this.txtWinBadgeScoreChage.setTextBounds(this.fWinBadgeInfo.width, 5, this.fWinBadgeInfo.width/3, this.fWinBadgeInfo.height);
	
	this.fLoseBadgeInfo.addChild(this.txtLoseBadgeScore);
	this.fLoseBadgeInfo.addChild(this.txtLoseBadgeScoreChage);
	this.txtLoseBadgeScore.setTextBounds(this.fLoseBadge.width/1.5, 5, this.fLoseBadgeInfo.width - this.fLoseBadge.width, this.fLoseBadgeInfo.height);
	this.txtLoseBadgeScoreChage.setTextBounds(this.fLoseBadgeInfo.width, 5, this.fLoseBadgeInfo.width/3, this.fLoseBadgeInfo.height);
	
	this.propertyValue = {
		'winnerProfileSize': 187,
		'loserProfileSize': 148
	};

	var winNameStyle = {fontSize: '40px', fill: '#ffffff', font: 'hs_bubbleregular', boundsAlignH: 'left', boundsAlignV: 'top'};
	var loseNameStyle = {fontSize: '25px', fill: '#ffffff', font: 'hs_bubbleregular', boundsAlignH: 'left', boundsAlignV: 'top'};

	this.fWinnerName = this.game.add.text(0, 0, 'winner', winNameStyle);
	this.fWinnerName.stroke = '#0d4d72';
	this.fWinnerName.strokeThickness = 3;
	
	this.fWinnerName.setTextBounds(340, 242, this.game.width/2, 45);
	this.fWinnerScore = this.game.add.bitmapText(340, 550, 'resultScore', '', 40);
	this.fWinnerScore.anchor.set(0,5, 1);

	this.fLoserName = this.game.add.text(0, 0, 'loser', loseNameStyle);
	this.fLoserName.stroke = '#0d4d72';
	this.fLoserName.strokeThickness = 3;
	this.fLoserName.setTextBounds(320, 737, this.game.width, 45);
	this.fLoserScore = this.game.add.bitmapText(320, 955, 'resultScore', '',30);
	this.fLoserScore.anchor.set(0,5, 1);

	this.fAnimWinBgTween = this.game.add.tween(this.fAnimWinBg.scale).to({x:[1.05, 0.9, 1], y:[1.05, 0.9, 1]}, 1500, 'Linear', true, 0, -1);

	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var ResultScene_proto = Object.create(Phaser.Group.prototype);
ResultScene.prototype = ResultScene_proto;
ResultScene.prototype.constructor = ResultScene;

/* --- end generated code --- */

// you can insert code here
ResultScene.prototype.superDestroy = ResultScene.prototype.destroy;
ResultScene.prototype.createProfileImage = function(winnerImageName, losserImageName){
	
	this.fWinnerProfileMaskImage = this.game.add.sprite(0, 0, 'resultUI', 'win_thumb_mask.png');
	this.fWinnerProfileMaskImage.visible = false;
	// thumbnail setting - 'winnerImageName'
	if (this.game.cache.checkImageKey(winnerImageName) === true) {
		
		var winImage = this.game.add.image(0, 0, winnerImageName);
		var ratio = this.fWinnerProfileMaskImage.width / winImage.width;
		winImage.scale.setTo(ratio, ratio);
		
		var winProfileBMD = this.game.make.bitmapData(this.fWinnerProfileMaskImage.width, this.fWinnerProfileMaskImage.height);
		winProfileBMD.alphaMask(winImage, this.fWinnerProfileMaskImage);
		this.winProfileImage = this.game.add.image(0, 0, winProfileBMD);
		this.fWinnerProfileContainer.add(this.winProfileImage);
		
		winImage.kill();
	}
	
	this.fLosserProfileMaskImage = this.game.add.sprite(0, 0, 'resultUI', 'lose_thumb_mask.png');
	this.fLosserProfileMaskImage.visible = false;
	
	// thumbnail setting - 'losserImageName'
	if (this.game.cache.checkImageKey(losserImageName) === true) {
		
		var loseImage = this.game.add.image(0, 0, losserImageName);
		ratio = this.fLosserProfileMaskImage.width / loseImage.width;
		loseImage.scale.setTo(ratio, ratio);
		
		var loseProfileBMD = this.game.make.bitmapData(this.fLosserProfileMaskImage.width, this.fLosserProfileMaskImage.height);
		loseProfileBMD.alphaMask(loseImage, this.fLosserProfileMaskImage);
		this.loseProfileImage = this.game.add.image(0,0, loseProfileBMD);
		this.fLoserProfileContainer.add(this.loseProfileImage);
		
		loseImage.kill();
	}
};

/**
 * 
 * @param isOnFlag on/off state
 */
ResultScene.prototype.operatePopupEmotion = function(isOnFlag) {
	if(isOnFlag === true){
		this.fEmoticonGroup.inputEnableChildren = true;
		this.fEmoticonGroup.visible = true;
		this.game.add.tween(this.fEmoticonGroup).to({alpha:1}, 700, 'Quart.easeOut', true, 0);
	}
	else{
		this.fEmoticonGroup.inputEnableChildren = false;
		this.game.add.tween(this.fEmoticonGroup).to({alpha:0}, 700, 'Quart.easeOut', true, 0)
		.onComplete.addOnce(function() {	
			this.fEmoticonGroup.visible = false;
		}.bind(this));
	}
};

/**
 * winEmoticon
 * @param frameName : emoticon frameName
 */
ResultScene.prototype.operateWinEmotion = function(frameName, isUse) {

	this.fWinEmoticonGroup.alpha = 0;
	this.fWinEmoticonGroup.visible = true;
	
	this.game.add.tween(this.fWinEmoticonGroup).to({alpha:[1,1,1,0]}, 6000, 'Quart.easeOut', true, 0, 0);
	
	this.fWinEmoticon.frameName = frameName;
	
	if(isUse === true){
		this.operatePopupEmotion(false);
	}
	
};

/**
 * loseEmoticon
 * @param frameName : emoticon frameName
 */
ResultScene.prototype.operateLoseEmotion = function(frameName, isUse) {

	this.fLoseEmoticonGroup.alpha = 0;
	this.fLoseEmoticonGroup.visible = true;
	
	this.game.add.tween(this.fLoseEmoticonGroup).to({alpha:[1,1,1,0]}, 6000, 'Quart.easeOut', true, 0, 0);
	this.fLoseEmoticon.frameName = frameName;
	
	if(isUse === true){
		this.operatePopupEmotion(false);
	}
};

/**
 * textAnim
 * @param sprite : text group
 */
ResultScene.prototype.operateTxtAnim = function(txtGroup) {
	txtGroup.alpha = 0;
	txtGroup.visible = true;
	this.game.add.tween(txtGroup).to({alpha:1}, 1000, 'Quart.easeOut', true)
	.onComplete.addOnce(function(){
		this.game.time.events.loop(1500, function(){
			this.game.add.tween(txtGroup).to({alpha:0}, 1000, 'Quart.easeOut', true);
		}.bind(this));
	}.bind(this));
};

/**
 * setting ResultUI
 * @param sprite : text group
 */
ResultScene.prototype.setWinAndLoseResultUI = function(winData, loseData, winScore, loseScore) {
	this.fWinnerName.text = winData.name;
	this.fWinnerScore.text = StzUtil.createNumComma(winScore);
	
	this.fLoserName.text = loseData.name;
	this.fLoserScore.text = StzUtil.createNumComma(loseScore);
	
	this.fUpTitle.frameName = 'win_title.png';
	this.fDownTitle.frameName = 'loser_title.png';
	
	var chagePoint =  winData.badge.calcResultPoint(loseData.badge.getBadgeData().badgeScore);
	this.txtWinBadgeScoreChage.text = '+' + chagePoint;
	this.txtLoseBadgeScoreChage.text = '-' + chagePoint;
	
	var resultWinTrophy = winData.badge.getBadgeData().badgeScore + chagePoint;
	var resultLoseTrophy = loseData.badge.getBadgeData().badgeScore - chagePoint;
	
	if(resultWinTrophy < 0){
		resultWinTrophy = 0;
	}
	
	if(resultLoseTrophy < 0){
		resultLoseTrophy = 0;
	}
	
	this.txtWinBadgeScore.text = resultWinTrophy;
	this.txtLoseBadgeScore.text = resultLoseTrophy;
	
	securityStorage.setInt('winTrophy',resultWinTrophy);
	securityStorage.setInt('loseTrophy',resultLoseTrophy);
	
	winData.badge.updateBadgeData(securityStorage.getInt('winTrophy'));
	loseData.badge.updateBadgeData(securityStorage.getInt('loseTrophy'));
	
	this.fWinBadge.frame = winData.badge.getBadgeData().grade;
	this.fWinBadgeStar.frame = winData.badge.getBadgeData().starCount;
	
	this.fLoseBadge.frame = loseData.badge.getBadgeData().grade;
	this.fLoseBadgeStar.frame = loseData.badge.getBadgeData().starCount;
};

ResultScene.prototype.setDrawResultUI = function(winData, loseData, winScore, loseScore) {
	this.fWinnerName.text = winData.name;
	this.fWinnerScore.text = StzUtil.createNumComma(winScore);
	
	this.fLoserName.text = loseData.name;
	this.fLoserScore.text = StzUtil.createNumComma(loseScore);
	
	this.fUpTitle.frameName = 'draw_up.png';
	this.fDownTitle.frameName = 'draw_down.png';
	
	this.txtWinBadgeScoreChage.text = '+0';
	this.txtLoseBadgeScoreChage.text = '+0';
	
	this.fWinBadge.frame = winData.badge.getBadgeData().grade;
	this.fWinBadgeStar.frame = winData.badge.getBadgeData().starCount;
	
	this.fLoseBadge.frame = loseData.badge.getBadgeData().grade;
	this.fLoseBadgeStar.frame = loseData.badge.getBadgeData().starCount;
	
	this.txtWinBadgeScore.text = winData.badge.getBadgeData().badgeScore;
	this.txtLoseBadgeScore.text = loseData.badge.getBadgeData().badgeScore;
	
	this.fAnimWinBg.visible = false;
};

ResultScene.prototype.popupOpenDrawLvDown = function(preBadgeData, curBadgeData) {
	this.fLvDownGroup.visible = true;

	var decFontStyle = {fontSize: '28px', fill: '#cffaff', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'top'};
	var txtDec = this.game.add.text(100, 30, 'YOU GOT GRADE DOWN' , decFontStyle);
	this.fLvDownGroup.addChild(txtDec);
	
	var levelFontStyle = {fontSize: '32px', fill: '#289dc4', font: 'hs_bubbleregular', boundsAlignH: 'center', boundsAlignV: 'top'};
	
	var preLevel = preBadgeData.badgeGrade*5 + (preBadgeData.starCount+1);
	var txtpreLevel = this.game.add.text(500, 25, 'LV' + preLevel , levelFontStyle);
	this.fLvDownGroup.addChild(txtpreLevel);
	
	var curLevel = curBadgeData.badgeGrade*5 + (curBadgeData.starCount+1);
	var txtcurLevel = this.game.add.text(605, 25, 'LV'+ curLevel, levelFontStyle);
	this.fLvDownGroup.addChild(txtcurLevel);
	
	this.game.time.events.add(Phaser.Timer.SECOND*2, function(){
		this.game.add.tween(this.fLvDownGroup).to({alpha : 0}, 1000, 'Quart.easeOut', true)
		.onComplete.addOnce(function(){
			this.lvDownTween = null;
			this.fLvDownGroup.visible = false;
		}.bind(this));
	}.bind(this));
	
};

ResultScene.prototype.destroy = function(destroyChildren, soft) {
	
	this.fWinnerName.destroy();
	this.fWinnerScore.kill();
	this.fLoserName.destroy();
	this.fLoserScore.kill();
	this.txtWinBadgeScore.kill();
	this.txtWinBadgeScoreChage.kill();
	this.txtLoseBadgeScore.kill();
	this.txtLoseBadgeScoreChage.kill();
	
	this.fAnimWinBg.kill();
	this.fEmoticonGroup.destroy();
	
	this.game.tweens.remove(this.fAnimWinBgTween);

	this.superDestroy(destroyChildren, soft);
};
